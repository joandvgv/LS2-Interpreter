package analizadores; 
import java_cup.runtime.*;
import utilidades.*;

action code {:

    TablaTipos tabla;

    LSystem lsystem;

    void setTitulo(String nombrePrograma){
        tabla.setNombrePrograma(nombrePrograma);
    }

    void inicializar(){
        tabla = new TablaTipos();
        lsystem = new LSystem();
    }

    void addSimbolo(String nombre, String tipoBase, Float valor){
        tabla.agregaTipo(nombre, tipoBase, valor);
    }

    boolean existeSimbolo(String nombre){
        return tabla.existeTipo(nombre);
    }

    Tipo getTipo(String nombre){
        return tabla.getTipo(nombre);
    }

    void print(){
        tabla.print();
    }

    void addSymbol(String s){
        lsystem.addSimbolo(s);
    }
    
    void addMatriz(String m){
        lsystem.addMatriz(m);
    }
    
    void addGeneratriz(String g){
        lsystem.addGeneratriz(g);
    }
    
    
    void addMove(String m){
         lsystem.addMove(m);
    }
    void addCon(String c){
         lsystem.addCon(c);
    }
    
    void addNumop(String n){
         lsystem.addNumop(n);
    }

    void setPasos(int pasos) {
         lsystem.setPasos(pasos);
    }

    void setAngulo(int angulo) {
        lsystem.setAngulo(angulo);
    }

    void setProbabilidad(int probabilidad) {
        lsystem.setProbabilidad(probabilidad);
    }

    void imprimirLSystem(){
        lsystem.imprimir();
    }

    String traducir(String m){
        return lsystem.traducir(m);
    }

    void test(){
      System.out.println("Dibujando");
    }
    void dibujar(){
        System.out.println("Dibujando");
        Dibujar.dibujar();
    }
     



:}

parser code 
{:
    // Método al que se llama automáticamente ante algún error sintactico recuperable.
    public void syntax_error(Symbol s){ } 

    // Método al que se llama automáticamente ante algún error sintáctico irrecuperable. 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error síntactico en Línea " + s.left + " Columna " + s.right + ". \"" + s.value + "\" no se esperaba."); 
        System.exit(0);
    }  
:} 

terminal String TITULO, GRAMATICA, CONDICIONES, FIN;
terminal String MATRIZ, GENERATRIZ, PARAMETRO, PASOS, ANGULO, POSICION, VALOR, SIMBOLO, PROBABILIDAD, NOM_SIMBOL;
terminal OP_SUMA, OP_RESTA, OP_PRODUCTO, OP_DIVISION, OP_MOD, OP_POTENCIA, OP_LOG, OP_ASSIGN, UMINUS;
terminal String OP_AND, OP_OR, OP_MENOR, OP_MENOR_IG, OP_MAYOR_IG, OP_MAYOR, OP_IGUAL, OP_DIF, OP_NOT;
terminal String FLECHA, DOBLERAYA, PUSH, POP, MOV, TURN;
terminal String DOSPTS, COMA, LP, RP, TYPE; 
terminal String DOBLESALTO;
terminal Float NUMERO;
terminal String NOM_PARAM;

non terminal program, secciones, gramatica;

non terminal simbolos, param, condiciones;

non terminal String movimiento, movimientos, turn, matriz, expr, list_expr;

non terminal String mov_generatriz, movs_generatriz, generatriz;

non terminal list_gen, probabilidad, mov_emp;

non terminal Float expr_e,expr_t, expr_f, expr_g, expr_h, expr_i, expr_j, expr_k, expr_l, expr_m, expr_n;

non terminal Boolean expr_log;

non terminal String paramvariables, paramfunc, valor, funcion;

non terminal sec_param, sec_simb, sec_param_valor, sec_param_expr, param_valor, param_expr, simbolo, list_param, parametros;

non terminal dibujar;

non terminal expr_assign;

precedence left DOBLERAYA;
precedence left NOM_SIMBOL;
precedence left MOV;

precedence left PARAMETRO;
precedence left OP_OR, OP_AND, OP_NOT;
precedence left OP_IGUAL, OP_DIF, OP_MAYOR, OP_MAYOR_IG, OP_MENOR_IG, OP_MENOR;     
precedence left OP_SUMA, OP_RESTA;
precedence left OP_PRODUCTO, OP_DIVISION, OP_MOD;
precedence left OP_POTENCIA, OP_LOG;
precedence left LP, RP;
precedence left OP_ASSIGN; 
precedence left UMINUS;

start with dibujar; 

dibujar::= program {:dibujar();:};

program::= {:inicializar();:} secciones;

secciones::= TITULO:t {:setTitulo(t);:} DOBLESALTO  gramatica DOBLESALTO {:print();:} condiciones DOBLESALTO matriz DOBLESALTO GENERATRIZ list_gen FIN;


gramatica::= GRAMATICA sec_param sec_simb;

sec_param::= param_valor sec_param | param_expr sec_param | ;

param_valor::=  PARAMETRO NOM_PARAM:l DOSPTS TYPE:t VALOR NUMERO:n  {:
                                                                        if(existeSimbolo(l)){
                                                                            System.out.println("ERROR SEMANTICO! " + l + " declarada previamente");
                                                                            System.exit(0);
                                                                        }
                                                                        else
                                                                            addSimbolo(l, t, n);
                                                                        if (t.equals("Int"))
                                                                            if(n % 1 > 0){
                                                                                System.out.println("ERROR SEMANTICO! no se puede guardar " + n + " en tipo Int");
                                                                                System.exit(0);
                                                                            }
                                                                    :};
     

param_expr::= PARAMETRO NOM_PARAM:l DOSPTS TYPE:t OP_ASSIGN expr_e:n {:
                                                                        if(existeSimbolo(l)){
                                                                            System.out.println("ERROR SEMANTICO! " + l + " declarada previamente");
                                                                            System.exit(0);
                                                                        }
                                                                        else
                                                                            addSimbolo(l, t, n);
                                                                        if (t.equals("Int"))
                                                                            if(n % 1 > 0){
                                                                                System.out.println("ERROR SEMANTICO! no se puede guardar " + n + " en tipo Int");
                                                                                System.exit(0);
                                                                            }
                                                                    :};

sec_simb ::= simbolo simbolos;

simbolos::= simbolo simbolos | ; 

simbolo::= SIMBOLO NOM_SIMBOL:l list_param  {:
                                                if(existeSimbolo(l)){
                                                    System.out.println("ERROR SEMANTICO! " + l + " declarada previamente");
                                                    System.exit(0);
                                                }
                                                else{
                                                    addSimbolo(l, "Simbolo", null);
                                                    addSymbol(l);
                                                    addNumop(l);
                                                }
                                            :};

list_param::= LP param RP | ;

param::= expr_e 
         |
         expr_e COMA param 
         | 
         ;

condiciones::= CONDICIONES PASOS expr_e:p ANGULO expr_e:a POSICION LP expr_e COMA NUMERO RP expr_e:ai   {:
                                                                                                            if((p % 1 != 0) || (p < 0)){
                                                                                                                System.out.println("ERROR SEMANTICO! la cantidad de pasos debe ser un numero natural mayor que 0");
                                                                                                                System.exit(0);
                                                                                                            }
                                                                                                            if(a > 90){
                                                                                                                System.out.println("ERROR SEMANTICO! el angulo debe estar entre 0 y 90");
                                                                                                                System.exit(0);
                                                                                                            }
                                                                                                            if(!((ai < 180) && (ai > 0))){
                                                                                                                System.out.println("ERROR SEMANTICO! el angulo de posicion inicial debe estar entre 0 y 180");
                                                                                                                System.exit(0);
                                                                                                            }
                                                                                                            setPasos(Math.round(p));
                                                                                                            setAngulo(Math.round(a));

                                                                                                        :};

matriz::= MATRIZ movimientos:e {: RESULT = e; addMatriz(traducir(e));:};

movimientos::=  movimiento:m DOBLERAYA:dr movimientos:mv    {: RESULT=m + dr + mv;:} 
                | 
                movimiento:m                                {: RESULT = m; :} 
                |
                mov_emp:me DOBLERAYA:dr movimientos:mv      {: RESULT = me + dr + mv;:}; 

mov_emp::= PUSH:pu movimientos:mv POP:po        {: RESULT=pu + mv + po;  addCon(traducir(pu)); addCon(traducir(po)); addNumop(traducir(pu)); addNumop(traducir(po));:};

movimiento::= MOV:m NOM_SIMBOL:ns list_param:lp    {: RESULT = m + ns + lp;:} 
              | 
              turn:t                            {:RESULT = t; :}; 

turn::= TURN LP expr_e RP 
        |
        TURN:t      {:RESULT = t; addCon(traducir(t)); addNumop(traducir(t));:} ; 

generatriz::=   NOM_SIMBOL:ns list_param:lp DOSPTS:dp expr_log:el FLECHA:f probabilidad:p movimientos:m   {: RESULT = ns + lp +dp+ el + f + p +m;:}
                |
                NOM_SIMBOL:ns FLECHA:f probabilidad:p movimientos:m                                        {: RESULT = ns + f + p +m; addGeneratriz(traducir(RESULT));  dibujar();:};

probabilidad::= PROBABILIDAD NUMERO:n {: RESULT = String.valueOf(n); setProbabilidad(Math.round(n));:}  | ;

movs_generatriz::=  mov_generatriz:p DOBLERAYA movs_generatriz 
                    |
                    movimientos;

list_gen::= generatriz DOBLESALTO list_gen 
            |
            generatriz DOBLESALTO;

expr_log ::=    expr_log:l OP_OR expr_log:r   {: RESULT=(l || r); :}            
                |
                expr_log:l OP_AND expr_log :r {: RESULT=(l && r); :}        
                |   
                expr_e:l OP_IGUAL expr_e:r    {: RESULT= (l == r); :}                
                |
                expr_e:l OP_DIF expr_e:r      {: RESULT= (l != r); :}                  
                |
                expr_e:l OP_MAYOR expr_e:r    {: RESULT=(l > r); :}                
                |
                expr_e:l OP_MAYOR_IG expr_e:r {: RESULT=(l >= r); :}                
                |
                expr_e:l OP_MENOR_IG expr_e:r {: RESULT=(l <= r); :}              
                |
                expr_e:l OP_MENOR expr_e:r    {: RESULT=(l < r); :} 
                |
                OP_NOT expr_log:e             {: RESULT=(!e); :}  
                |                   
                LP expr_log:e RP              {: RESULT=e; :};                            


expr_e ::=  expr_e:l OP_SUMA expr_t:r {: RESULT=new Float(l.floatValue() + r.floatValue()); :}
            |
            expr_t:e {: RESULT=e; :}
            ;
 
expr_t ::=  expr_t:l OP_RESTA expr_f:r {: RESULT=new Float(l.floatValue() - r.floatValue()); :}
            |
            expr_f:e {: RESULT=e; :}
            ;

expr_f ::=  expr_f:l OP_PRODUCTO expr_g:r {: RESULT=new Float(l.floatValue() * r.floatValue()); :}
            | 
            expr_g:e {: RESULT=e; :}
            ;
         
expr_g ::=  expr_g:l OP_DIVISION expr_i:r {: RESULT=new Float(l.floatValue() / r.floatValue()); :}
            |
            expr_i:e {: RESULT=e; :}
            ;
         
expr_i ::=  expr_i:l OP_POTENCIA expr_j:r {: RESULT= new Float((float) Math.pow(l.floatValue(),r.floatValue()));:}
            |
            expr_j:e {: RESULT=e; :}
            ;

expr_j ::=  OP_LOG LP expr_e:e RP {: RESULT= new Float((float) Math.log(e));:} 
            |
            expr_k:e {: RESULT=e; :}
            ;
         
expr_k ::=  expr_k:l OP_MOD expr_h:r {: RESULT = new Float(l.floatValue() % r.floatValue());:}
            |
            expr_h:e {: RESULT=e; :}
            ;

expr_h ::=  LP expr_e:e RP {: RESULT=e; :}
            |
            NUMERO:n {: RESULT=n; :} 
            | 
            OP_RESTA expr_h:r {: RESULT = new Float(0-r.floatValue());:} %prec UMINUS
            | 
            NOM_PARAM:n {: 
                            if(!existeSimbolo(n)){
                                System.out.println("ERROR SEMANTICO! " + n + " no se encuantra declarada");
                                System.exit(0);
                            }
                            RESULT=new Float(getTipo(n).getValor()); :} 
            ;