
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Mar 18 22:34:48 VET 2017
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import utilidades.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Mar 18 22:34:48 VET 2017
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\052\003\000\002\054" +
    "\002\000\002\002\004\000\002\055\002\000\002\003\017" +
    "\000\002\004\005\000\002\043\004\000\002\043\002\000" +
    "\002\044\004\000\002\045\004\000\002\045\002\000\002" +
    "\046\004\000\002\046\002\000\002\047\010\000\002\050" +
    "\007\000\002\053\004\000\002\051\004\000\002\005\004" +
    "\000\002\005\002\000\002\006\005\000\002\007\005\000" +
    "\002\007\002\000\002\010\003\000\002\010\005\000\002" +
    "\010\002\000\002\011\016\000\002\015\004\000\002\013" +
    "\005\000\002\013\003\000\002\013\005\000\002\025\005" +
    "\000\002\012\005\000\002\012\003\000\002\014\006\000" +
    "\002\014\003\000\002\022\011\000\002\022\006\000\002" +
    "\024\004\000\002\024\002\000\002\021\005\000\002\021" +
    "\003\000\002\023\004\000\002\023\003\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\027\003\000\002\034\005\000\002\034\003\000\002\030" +
    "\005\000\002\030\003\000\002\031\005\000\002\031\003" +
    "\000\002\032\005\000\002\032\003\000\002\035\005\000" +
    "\002\035\003\000\002\036\006\000\002\036\003\000\002" +
    "\037\005\000\002\037\003\000\002\033\005\000\002\033" +
    "\003\000\002\033\004\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\004\004\uffff\001\002\000\004\002\000\001" +
    "\002\000\004\004\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\054\ufffd\001\002\000" +
    "\004\002\ufffe\001\002\000\004\054\013\001\002\000\004" +
    "\005\015\001\002\000\004\054\120\001\002\000\006\012" +
    "\017\017\ufff9\001\002\000\004\017\103\001\002\000\004" +
    "\056\075\001\002\000\006\012\017\017\ufff6\001\002\000" +
    "\004\017\ufffa\001\002\000\006\012\017\017\ufff6\001\002" +
    "\000\006\012\025\017\ufff4\001\002\000\004\017\ufff8\001" +
    "\002\000\004\056\030\001\002\000\006\012\025\017\ufff4" +
    "\001\002\000\004\017\ufff5\001\002\000\004\047\031\001" +
    "\002\000\004\053\032\001\002\000\004\031\034\001\002" +
    "\000\006\012\ufff2\017\ufff2\001\002\000\014\023\037\030" +
    "\043\051\036\055\046\056\040\001\002\000\042\012\uffcc" +
    "\014\uffcc\015\uffcc\017\uffcc\022\uffcc\023\054\033\uffcc\034" +
    "\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\050\uffcc" +
    "\052\uffcc\054\uffcc\001\002\000\014\023\037\030\043\051" +
    "\036\055\046\056\040\001\002\000\012\023\037\051\036" +
    "\055\046\056\040\001\002\000\052\012\uffbc\014\uffbc\015" +
    "\uffbc\017\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc" +
    "\027\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040" +
    "\uffbc\041\uffbc\050\uffbc\052\uffbc\054\uffbc\001\002\000\052" +
    "\012\uffc2\014\uffc2\015\uffc2\017\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\026\067\027\uffc2\033\uffc2\034\uffc2\035\uffc2" +
    "\036\uffc2\037\uffc2\040\uffc2\041\uffc2\050\uffc2\052\uffc2\054" +
    "\uffc2\001\002\000\050\012\uffc4\014\uffc4\015\uffc4\017\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\025\uffc4\027\uffc4\033\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\050\uffc4" +
    "\052\uffc4\054\uffc4\001\002\000\004\051\064\001\002\000" +
    "\050\012\uffc6\014\uffc6\015\uffc6\017\uffc6\022\uffc6\023\uffc6" +
    "\024\uffc6\025\uffc6\027\062\033\uffc6\034\uffc6\035\uffc6\036" +
    "\uffc6\037\uffc6\040\uffc6\041\uffc6\050\uffc6\052\uffc6\054\uffc6" +
    "\001\002\000\052\012\uffc0\014\uffc0\015\uffc0\017\uffc0\022" +
    "\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\050" +
    "\uffc0\052\uffc0\054\uffc0\001\002\000\052\012\uffbe\014\uffbe" +
    "\015\uffbe\017\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026" +
    "\uffbe\027\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe" +
    "\040\uffbe\041\uffbe\050\uffbe\052\uffbe\054\uffbe\001\002\000" +
    "\046\012\uffc8\014\uffc8\015\uffc8\017\uffc8\022\uffc8\023\uffc8" +
    "\024\uffc8\025\060\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\040\uffc8\041\uffc8\050\uffc8\052\uffc8\054\uffc8\001\002" +
    "\000\044\012\uffca\014\uffca\015\uffca\017\uffca\022\uffca\023" +
    "\uffca\024\056\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca" +
    "\040\uffca\041\uffca\050\uffca\052\uffca\054\uffca\001\002\000" +
    "\010\012\ufff1\017\ufff1\022\052\001\002\000\014\023\037" +
    "\030\043\051\036\055\046\056\040\001\002\000\042\012" +
    "\uffcd\014\uffcd\015\uffcd\017\uffcd\022\uffcd\023\054\033\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\050" +
    "\uffcd\052\uffcd\054\uffcd\001\002\000\014\023\037\030\043" +
    "\051\036\055\046\056\040\001\002\000\044\012\uffcb\014" +
    "\uffcb\015\uffcb\017\uffcb\022\uffcb\023\uffcb\024\056\033\uffcb" +
    "\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\050" +
    "\uffcb\052\uffcb\054\uffcb\001\002\000\014\023\037\030\043" +
    "\051\036\055\046\056\040\001\002\000\046\012\uffc9\014" +
    "\uffc9\015\uffc9\017\uffc9\022\uffc9\023\uffc9\024\uffc9\025\060" +
    "\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041" +
    "\uffc9\050\uffc9\052\uffc9\054\uffc9\001\002\000\014\023\037" +
    "\030\043\051\036\055\046\056\040\001\002\000\050\012" +
    "\uffc7\014\uffc7\015\uffc7\017\uffc7\022\uffc7\023\uffc7\024\uffc7" +
    "\025\uffc7\027\062\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\050\uffc7\052\uffc7\054\uffc7\001\002" +
    "\000\014\023\037\030\043\051\036\055\046\056\040\001" +
    "\002\000\050\012\uffc5\014\uffc5\015\uffc5\017\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\025\uffc5\027\uffc5\033\uffc5\034\uffc5\035" +
    "\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\050\uffc5\052\uffc5" +
    "\054\uffc5\001\002\000\014\023\037\030\043\051\036\055" +
    "\046\056\040\001\002\000\006\022\052\052\066\001\002" +
    "\000\050\012\uffc3\014\uffc3\015\uffc3\017\uffc3\022\uffc3\023" +
    "\uffc3\024\uffc3\025\uffc3\027\uffc3\033\uffc3\034\uffc3\035\uffc3" +
    "\036\uffc3\037\uffc3\040\uffc3\041\uffc3\050\uffc3\052\uffc3\054" +
    "\uffc3\001\002\000\012\023\037\051\036\055\046\056\040" +
    "\001\002\000\052\012\uffc1\014\uffc1\015\uffc1\017\uffc1\022" +
    "\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\050" +
    "\uffc1\052\uffc1\054\uffc1\001\002\000\052\012\uffbd\014\uffbd" +
    "\015\uffbd\017\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\027\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd" +
    "\040\uffbd\041\uffbd\050\uffbd\052\uffbd\054\uffbd\001\002\000" +
    "\006\022\052\052\073\001\002\000\052\012\uffbf\014\uffbf" +
    "\015\uffbf\017\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026" +
    "\uffbf\027\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf" +
    "\040\uffbf\041\uffbf\050\uffbf\052\uffbf\054\uffbf\001\002\000" +
    "\006\012\ufff7\017\ufff7\001\002\000\004\047\076\001\002" +
    "\000\004\053\077\001\002\000\004\016\100\001\002\000" +
    "\004\055\101\001\002\000\006\012\ufff3\017\ufff3\001\002" +
    "\000\004\054\ufffb\001\002\000\004\021\110\001\002\000" +
    "\006\017\103\054\uffee\001\002\000\004\054\ufff0\001\002" +
    "\000\006\017\103\054\uffee\001\002\000\004\054\uffef\001" +
    "\002\000\010\017\uffeb\051\111\054\uffeb\001\002\000\016" +
    "\023\037\030\043\051\036\052\uffe8\055\046\056\040\001" +
    "\002\000\006\017\uffed\054\uffed\001\002\000\004\052\117" +
    "\001\002\000\010\022\052\050\115\052\uffea\001\002\000" +
    "\016\023\037\030\043\051\036\052\uffe8\055\046\056\040" +
    "\001\002\000\004\052\uffe9\001\002\000\016\017\uffec\021" +
    "\uffec\042\uffec\044\uffec\047\uffec\054\uffec\001\002\000\004" +
    "\006\121\001\002\000\004\013\215\001\002\000\004\054" +
    "\123\001\002\000\004\010\125\001\002\000\004\054\150" +
    "\001\002\000\010\043\133\045\130\046\134\001\002\000" +
    "\012\021\uffe4\042\146\044\uffe4\054\uffe4\001\002\000\004" +
    "\042\144\001\002\000\004\021\142\001\002\000\012\021" +
    "\uffe0\042\uffe0\044\uffe0\054\uffe0\001\002\000\004\054\uffe6" +
    "\001\002\000\010\043\133\045\130\046\134\001\002\000" +
    "\014\021\uffde\042\uffde\044\uffde\051\135\054\uffde\001\002" +
    "\000\014\023\037\030\043\051\036\055\046\056\040\001" +
    "\002\000\006\022\052\052\137\001\002\000\012\021\uffdf" +
    "\042\uffdf\044\uffdf\054\uffdf\001\002\000\004\044\141\001" +
    "\002\000\004\042\uffe2\001\002\000\014\021\uffeb\042\uffeb" +
    "\044\uffeb\051\111\054\uffeb\001\002\000\012\021\uffe1\042" +
    "\uffe1\044\uffe1\054\uffe1\001\002\000\010\043\133\045\130" +
    "\046\134\001\002\000\010\021\uffe3\044\uffe3\054\uffe3\001" +
    "\002\000\010\043\133\045\130\046\134\001\002\000\010" +
    "\021\uffe5\044\uffe5\054\uffe5\001\002\000\004\011\151\001" +
    "\002\000\004\021\154\001\002\000\006\021\154\054\uffd6" +
    "\001\002\000\004\054\212\001\002\000\010\041\155\047" +
    "\uffeb\051\111\001\002\000\012\020\200\043\uffda\045\uffda" +
    "\046\uffda\001\002\000\004\047\157\001\002\000\014\023" +
    "\037\030\043\051\160\055\046\056\040\001\002\000\014" +
    "\023\037\030\043\051\160\055\046\056\040\001\002\000" +
    "\010\033\174\034\176\041\175\001\002\000\024\022\052" +
    "\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041" +
    "\uffce\052\uffce\001\002\000\012\035\164\036\165\037\166" +
    "\040\167\001\002\000\014\023\037\030\043\051\036\055" +
    "\046\056\040\001\002\000\014\023\037\030\043\051\036" +
    "\055\046\056\040\001\002\000\014\023\037\030\043\051" +
    "\036\055\046\056\040\001\002\000\014\023\037\030\043" +
    "\051\036\055\046\056\040\001\002\000\012\033\uffd2\034" +
    "\uffd2\041\uffd2\052\uffd2\001\002\000\012\033\uffd3\034\uffd3" +
    "\041\uffd3\052\uffd3\001\002\000\012\033\uffd1\034\uffd1\041" +
    "\uffd1\052\uffd1\001\002\000\012\033\uffd0\034\uffd0\041\uffd0" +
    "\052\uffd0\001\002\000\014\023\037\030\043\051\160\055" +
    "\046\056\040\001\002\000\012\020\200\043\uffda\045\uffda" +
    "\046\uffda\001\002\000\014\023\037\030\043\051\160\055" +
    "\046\056\040\001\002\000\012\033\uffd5\034\uffd5\041\uffd5" +
    "\052\uffd5\001\002\000\004\055\203\001\002\000\010\043" +
    "\133\045\130\046\134\001\002\000\006\021\uffdd\054\uffdd" +
    "\001\002\000\010\043\uffdb\045\uffdb\046\uffdb\001\002\000" +
    "\012\033\uffd4\034\uffd4\041\uffd4\052\uffd4\001\002\000\010" +
    "\033\174\034\176\052\207\001\002\000\016\022\052\035" +
    "\uffce\036\uffce\037\uffce\040\uffce\052\073\001\002\000\012" +
    "\033\uffcf\034\uffcf\041\uffcf\052\uffcf\001\002\000\010\043" +
    "\133\045\130\046\134\001\002\000\006\021\uffdc\054\uffdc" +
    "\001\002\000\004\007\213\001\002\000\004\002\ufffc\001" +
    "\002\000\004\054\uffd7\001\002\000\014\023\037\030\043" +
    "\051\036\055\046\056\040\001\002\000\006\014\217\022" +
    "\052\001\002\000\014\023\037\030\043\051\036\055\046" +
    "\056\040\001\002\000\006\015\221\022\052\001\002\000" +
    "\004\051\222\001\002\000\014\023\037\030\043\051\036" +
    "\055\046\056\040\001\002\000\006\022\052\050\224\001" +
    "\002\000\004\055\225\001\002\000\004\052\226\001\002" +
    "\000\014\023\037\030\043\051\036\055\046\056\040\001" +
    "\002\000\006\022\052\054\uffe7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\010\002\003\052\005\054\004\001\001\000" +
    "\002\001\001\000\004\003\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\013\001\001\000\002" +
    "\001\001\000\006\043\015\047\017\001\001\000\006\006" +
    "\103\051\101\001\001\000\002\001\001\000\010\044\020" +
    "\045\022\047\021\001\001\000\002\001\001\000\006\045" +
    "\073\047\021\001\001\000\006\046\023\050\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\046\026\050" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\032\001\001\000\002\001\001\000" +
    "\022\030\034\031\047\032\046\033\044\034\050\035\043" +
    "\036\041\037\040\001\001\000\002\001\001\000\022\030" +
    "\034\031\047\032\046\033\044\034\071\035\043\036\041" +
    "\037\040\001\001\000\004\033\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\030\052\031\047\032\046\033\044\035\043\036\041\037" +
    "\040\001\001\000\002\001\001\000\016\031\054\032\046" +
    "\033\044\035\043\036\041\037\040\001\001\000\002\001" +
    "\001\000\014\032\056\033\044\035\043\036\041\037\040" +
    "\001\001\000\002\001\001\000\012\033\044\035\060\036" +
    "\041\037\040\001\001\000\002\001\001\000\010\033\044" +
    "\036\062\037\040\001\001\000\002\001\001\000\022\030" +
    "\034\031\047\032\046\033\044\034\064\035\043\036\041" +
    "\037\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\104\006\105\001\001\000\002\001\001" +
    "\000\006\005\106\006\105\001\001\000\002\001\001\000" +
    "\004\007\111\001\001\000\024\010\112\030\034\031\047" +
    "\032\046\033\044\034\113\035\043\036\041\037\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\010\115\030\034\031\047\032\046\033\044\034" +
    "\113\035\043\036\041\037\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\123\001\001\000\002" +
    "\001\001\000\012\012\125\013\131\014\130\025\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\125\013" +
    "\137\014\130\025\126\001\001\000\002\001\001\000\022" +
    "\030\034\031\047\032\046\033\044\034\135\035\043\036" +
    "\041\037\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\142\001" +
    "\001\000\002\001\001\000\012\012\125\013\144\014\130" +
    "\025\126\001\001\000\002\001\001\000\012\012\125\013" +
    "\146\014\130\025\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\151\023\152\001\001\000\006\022" +
    "\151\023\213\001\001\000\002\001\001\000\004\007\155" +
    "\001\001\000\004\024\207\001\001\000\002\001\001\000" +
    "\026\026\160\027\162\030\034\031\047\032\046\033\044" +
    "\034\161\035\043\036\041\037\040\001\001\000\026\026" +
    "\204\027\162\030\034\031\047\032\046\033\044\034\205" +
    "\035\043\036\041\037\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\027\172\030\034" +
    "\031\047\032\046\033\044\034\161\035\043\036\041\037" +
    "\040\001\001\000\024\027\171\030\034\031\047\032\046" +
    "\033\044\034\161\035\043\036\041\037\040\001\001\000" +
    "\024\027\170\030\034\031\047\032\046\033\044\034\161" +
    "\035\043\036\041\037\040\001\001\000\024\027\167\030" +
    "\034\031\047\032\046\033\044\034\161\035\043\036\041" +
    "\037\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\026\203\027\162" +
    "\030\034\031\047\032\046\033\044\034\161\035\043\036" +
    "\041\037\040\001\001\000\004\024\200\001\001\000\026" +
    "\026\176\027\162\030\034\031\047\032\046\033\044\034" +
    "\161\035\043\036\041\037\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\125\013\201\014\130\025" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\125\013\210\014\130\025\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\030\034\031\047\032\046\033\044" +
    "\034\215\035\043\036\041\037\040\001\001\000\002\001" +
    "\001\000\022\030\034\031\047\032\046\033\044\034\217" +
    "\035\043\036\041\037\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\030\034\031\047\032\046\033\044" +
    "\034\222\035\043\036\041\037\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\030\034" +
    "\031\047\032\046\033\044\034\226\035\043\036\041\037" +
    "\040\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Método al que se llama automáticamente ante algún error sintactico recuperable.
    public void syntax_error(Symbol s){ } 

    // Método al que se llama automáticamente ante algún error sintáctico irrecuperable. 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        /*
        String a = (String) s.value;
        char c = a.charAt(0);
        String b = String.format("%04x", (int) c);
        System.out.println("Error síntactico ("+s.left+", "+s.right+") componente: "+s.value+" hex: "+b);
        */
        System.out.println("Error síntactico en Línea "+s.left+" Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {



    TablaTipos tabla;

    LSystem lsystem;

    void setTitulo(String nombrePrograma){
        tabla.setNombrePrograma(nombrePrograma);
    }

    void inicializar(){
        tabla = new TablaTipos();
        lsystem = new LSystem();
    }

    void addSimbolo(String nombre, String tipoBase, Float valor){
        tabla.agregaTipo(nombre, tipoBase, valor);
    }

    boolean existeSimbolo(String nombre){
        return tabla.existeTipo(nombre);
    }

    Tipo getTipo(String nombre){
        return tabla.getTipo(nombre);
    }

    void print(){
        tabla.print();
    }

    void addSymbol(String s){
        lsystem.addSimbolo(s);
    }
    
    void addMatriz(String m){
        lsystem.addMatriz(m);
    }
    
    void addGeneratriz(String g){
        lsystem.addGeneratriz(g);
    }
    
    
    void addMove(String m){
         lsystem.addMove(m);
    }
    void addCon(String c){
         lsystem.addCon(c);
    }
    
    void addNumop(String n){
         lsystem.addNumop(n);
    }

    void setPasos(int pasos) {
         lsystem.setPasos(pasos);
    }

    void setAngulo(int angulo) {
        lsystem.setAngulo(angulo);
    }

    void setProbabilidad(int probabilidad) {
        lsystem.setProbabilidad(probabilidad);
    }

    void imprimirLSystem(){
        lsystem.imprimir();
    }

    String traducir(String m){
        return lsystem.traducir(m);
    }

    void test(){
      System.out.println("Dibujando");
    }
    void dibujar(){
        System.out.println("Dibujando");
        Dibujar.dibujar();
    }
     




  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr_h ::= NOM_PARAM 
            {
              Float RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                            if(!existeSimbolo(n)){
                                System.out.println("ERROR SEMANTICO! " + n + " no se encuantra declarada");
                                System.exit(0);
                            }
                            RESULT=new Float(getTipo(n).getValor()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_h",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr_h ::= OP_RESTA expr_h 
            {
              Float RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Float(0-r.floatValue());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_h",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr_h ::= NUMERO 
            {
              Float RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=n; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_h",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr_h ::= LP expr_e RP 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_h",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr_k ::= expr_h 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_k",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr_k ::= expr_k OP_MOD expr_h 
            {
              Float RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Float(l.floatValue() % r.floatValue());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_k",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr_j ::= expr_k 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_j",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr_j ::= OP_LOG LP expr_e RP 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Float((int) Math.log(e));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_j",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr_i ::= expr_j 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_i",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr_i ::= expr_i OP_POTENCIA expr_j 
            {
              Float RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT= new Float((int) Math.pow(l.floatValue(),r.floatValue()));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_i",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr_g ::= expr_i 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_g",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr_g ::= expr_g OP_DIVISION expr_i 
            {
              Float RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Float(l.floatValue() / r.floatValue()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_g",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_f ::= expr_g 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_f",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr_f ::= expr_f OP_PRODUCTO expr_g 
            {
              Float RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Float(l.floatValue() * r.floatValue()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_f",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr_t ::= expr_f 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_t",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr_t ::= expr_t OP_RESTA expr_f 
            {
              Float RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Float(l.floatValue() - r.floatValue()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_t",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr_e ::= expr_t 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_e",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr_e ::= expr_e OP_SUMA expr_t 
            {
              Float RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Float(l.floatValue() + r.floatValue()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_e",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr_part ::= expr_e 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_part",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr_log ::= LP expr_log RP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_log",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr_log ::= expr_part OP_MENOR expr_part 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_log",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr_log ::= expr_part OP_MAYOR expr_part 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_log",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr_log ::= expr_part OP_DIF expr_part 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_log",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr_log ::= expr_part OP_IGUAL expr_part 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_log",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr_log ::= expr_log OP_AND expr_log 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_log",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr_log ::= expr_log OP_OR expr_log 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_log",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // list_gen ::= generatriz 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("list_gen",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // list_gen ::= generatriz list_gen 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("list_gen",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // movs_generatriz ::= movimientos 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("movs_generatriz",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // movs_generatriz ::= mov_generatriz DOBLERAYA movs_generatriz 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("movs_generatriz",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // probabilidad ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("probabilidad",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // probabilidad ::= PROBABILIDAD NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = String.valueOf(n); setProbabilidad(Math.round(n));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("probabilidad",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // generatriz ::= NOM_SIMBOL FLECHA probabilidad movimientos 
            {
              String RESULT =null;
		int nsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String ns = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ns + f + p +m; addGeneratriz(traducir(RESULT));  dibujar();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("generatriz",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // generatriz ::= NOM_SIMBOL list_param DOSPTS expr_log FLECHA probabilidad movimientos 
            {
              String RESULT =null;
		int nsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String ns = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String dp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ns + lp +dp+ el + f + p +m;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("generatriz",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // turn ::= TURN 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = t; addCon(traducir(t)); addNumop(traducir(t));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("turn",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // turn ::= TURN LP expr_e RP 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("turn",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // movimiento ::= turn 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = t; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("movimiento",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // movimiento ::= MOV NOM_SIMBOL list_param 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int nsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String ns = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = m + ns; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("movimiento",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // mov_emp ::= PUSH movimientos POP 
            {
              Object RESULT =null;
		int puleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int puright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String pu = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int mvleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int mvright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mv = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int poleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int poright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String po = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=pu + mv + po; addCon(traducir(pu)); addCon(traducir(po)); addNumop(traducir(pu)); addNumop(traducir(po));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("mov_emp",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // movimientos ::= mov_emp DOBLERAYA movimientos 
            {
              String RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int drleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int drright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String dr = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int mvleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mvright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String mv = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = me + dr + mv;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("movimientos",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // movimientos ::= movimiento 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = m; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("movimientos",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // movimientos ::= movimiento DOBLERAYA movimientos 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int drleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int drright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String dr = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int mvleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mvright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String mv = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=m + dr + mv;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("movimientos",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // matriz ::= MATRIZ movimientos 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = e; addMatriz(traducir(e));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("matriz",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condiciones ::= CONDICIONES PASOS expr_e ANGULO expr_e POSICION LP expr_e COMA NUMERO RP expr_e 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Float p = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Float a = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int aileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int airight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float ai = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                                                            if((p % 1 != 0) || (p < 0)){
                                                                                                                System.out.println("ERROR SEMANTICO! la cantidad de pasos debe ser un numero natural mayor que 0");
                                                                                                                System.exit(0);
                                                                                                            }
                                                                                                            if(a > 90){
                                                                                                                System.out.println("ERROR SEMANTICO! el angulo debe estar entre 0 y 90");
                                                                                                                System.exit(0);
                                                                                                            }
                                                                                                            if(!((ai < 180) && (ai > 0))){
                                                                                                                System.out.println("ERROR SEMANTICO! el angulo de posicion inicial debe estar entre 0 y 180");
                                                                                                                System.exit(0);
                                                                                                            }
                                                                                                            setPasos(Math.round(p));
                                                                                                            setAngulo(Math.round(a));

                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condiciones",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // param ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("param",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // param ::= expr_e COMA param 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("param",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // param ::= expr_e 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("param",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // list_param ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("list_param",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // list_param ::= LP param RP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("list_param",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // simbolo ::= SIMBOLO NOM_SIMBOL list_param 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                if(existeSimbolo(l)){
                                                    System.out.println("ERROR! " + l + " declarada previamente");
                                                    System.exit(0);
                                                }
                                                else{
                                                    addSimbolo(l, "Simbolo", null);
                                                    addSymbol(l);
                                                    addNumop(l);
                                                }
                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolo",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // simbolos ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // simbolos ::= simbolo simbolos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // list_simb ::= simbolo simbolos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("list_simb",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr_assign ::= OP_ASSIGN expr_e 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_assign",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // funcion ::= PARAMETRO NOM_PARAM DOSPTS TYPE expr_assign 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // valor ::= PARAMETRO NOM_PARAM DOSPTS TYPE VALOR NUMERO 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                    if (t.equals("Int"))
                                                                        if(n % 1 > 0){
                                                                            System.out.println("ERROR! no se puede guardar " + n + " en tipo Int");
                                                                            System.exit(0);
                                                                        }
                                                                    if(existeSimbolo(l)){
                                                                        System.out.println("ERROR! " + l + " declarada previamente");
                                                                        System.exit(0);
                                                                    }
                                                                    else
                                                                        addSimbolo(l, t, n);
                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // paramfunc ::= 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("paramfunc",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // paramfunc ::= funcion paramfunc 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("paramfunc",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // paramvariables ::= 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("paramvariables",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // paramvariables ::= valor paramvariables 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("paramvariables",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parametros ::= paramvariables paramfunc 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sec_param ::= 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sec_param",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sec_param ::= valor parametros 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sec_param",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // gramatica ::= GRAMATICA sec_param list_simb 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("gramatica",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // secciones ::= TITULO NT$1 DOBLESALTO gramatica DOBLESALTO condiciones DOBLESALTO matriz DOBLESALTO GENERATRIZ list_gen DOBLESALTO FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("secciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
setTitulo(t);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= NT$0 secciones 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
inicializar();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // dibujar ::= program 
            {
              Object RESULT =null;
		dibujar();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dibujar",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= dibujar EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

