
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 13 12:32:57 VET 2017
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import utilidades.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 13 12:32:57 VET 2017
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\053\003\000\002\055" +
    "\002\000\002\002\004\000\002\056\002\000\002\003\020" +
    "\000\002\004\004\000\002\004\002\000\002\005\005\000" +
    "\002\044\004\000\002\044\002\000\002\045\004\000\002" +
    "\046\004\000\002\046\002\000\002\047\004\000\002\047" +
    "\002\000\002\050\010\000\002\051\007\000\002\054\004" +
    "\000\002\052\004\000\002\006\004\000\002\006\002\000" +
    "\002\007\005\000\002\010\005\000\002\010\002\000\002" +
    "\011\003\000\002\011\005\000\002\011\002\000\002\012" +
    "\016\000\002\016\004\000\002\014\005\000\002\014\003" +
    "\000\002\014\005\000\002\026\005\000\002\013\005\000" +
    "\002\013\003\000\002\015\006\000\002\015\003\000\002" +
    "\023\011\000\002\023\006\000\002\025\004\000\002\025" +
    "\002\000\002\022\005\000\002\022\003\000\002\024\004" +
    "\000\002\024\003\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\030\003\000\002\035" +
    "\005\000\002\035\003\000\002\031\005\000\002\031\003" +
    "\000\002\032\005\000\002\032\003\000\002\033\005\000" +
    "\002\033\003\000\002\036\005\000\002\036\003\000\002" +
    "\037\006\000\002\037\003\000\002\040\005\000\002\040" +
    "\003\000\002\034\005\000\002\034\003\000\002\034\004" +
    "\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\004\004\uffff\001\002\000\004\002\000\001" +
    "\002\000\004\004\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\055\ufffd\001\002\000" +
    "\004\002\ufffe\001\002\000\004\055\013\001\002\000\006" +
    "\005\015\006\ufffa\001\002\000\004\006\020\001\002\000" +
    "\004\055\016\001\002\000\004\006\ufffb\001\002\000\004" +
    "\055\123\001\002\000\006\013\023\020\ufff7\001\002\000" +
    "\004\020\106\001\002\000\006\013\023\020\ufff4\001\002" +
    "\000\004\057\024\001\002\000\004\050\025\001\002\000" +
    "\004\054\026\001\002\000\004\017\027\001\002\000\004" +
    "\056\030\001\002\000\006\013\ufff1\020\ufff1\001\002\000" +
    "\004\020\ufff8\001\002\000\006\013\023\020\ufff4\001\002" +
    "\000\006\013\035\020\ufff2\001\002\000\004\020\ufff6\001" +
    "\002\000\004\057\040\001\002\000\006\013\035\020\ufff2" +
    "\001\002\000\004\020\ufff3\001\002\000\004\050\041\001" +
    "\002\000\004\054\042\001\002\000\004\032\044\001\002" +
    "\000\006\013\ufff0\020\ufff0\001\002\000\014\024\047\031" +
    "\053\052\046\056\055\057\050\001\002\000\042\013\uffca" +
    "\015\uffca\016\uffca\020\uffca\023\uffca\024\064\034\uffca\035" +
    "\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\051\uffca" +
    "\053\uffca\055\uffca\001\002\000\014\024\047\031\053\052" +
    "\046\056\055\057\050\001\002\000\012\024\047\052\046" +
    "\056\055\057\050\001\002\000\052\013\uffba\015\uffba\016" +
    "\uffba\020\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba" +
    "\030\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041" +
    "\uffba\042\uffba\051\uffba\053\uffba\055\uffba\001\002\000\052" +
    "\013\uffc0\015\uffc0\016\uffc0\020\uffc0\023\uffc0\024\uffc0\025" +
    "\uffc0\026\uffc0\027\077\030\uffc0\034\uffc0\035\uffc0\036\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\042\uffc0\051\uffc0\053\uffc0\055" +
    "\uffc0\001\002\000\050\013\uffc2\015\uffc2\016\uffc2\020\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\026\uffc2\030\uffc2\034\uffc2\035" +
    "\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\051\uffc2" +
    "\053\uffc2\055\uffc2\001\002\000\004\052\074\001\002\000" +
    "\050\013\uffc4\015\uffc4\016\uffc4\020\uffc4\023\uffc4\024\uffc4" +
    "\025\uffc4\026\uffc4\030\072\034\uffc4\035\uffc4\036\uffc4\037" +
    "\uffc4\040\uffc4\041\uffc4\042\uffc4\051\uffc4\053\uffc4\055\uffc4" +
    "\001\002\000\052\013\uffbc\015\uffbc\016\uffbc\020\uffbc\023" +
    "\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\034\uffbc" +
    "\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\051" +
    "\uffbc\053\uffbc\055\uffbc\001\002\000\052\013\uffbe\015\uffbe" +
    "\016\uffbe\020\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027" +
    "\uffbe\030\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe" +
    "\041\uffbe\042\uffbe\051\uffbe\053\uffbe\055\uffbe\001\002\000" +
    "\046\013\uffc6\015\uffc6\016\uffc6\020\uffc6\023\uffc6\024\uffc6" +
    "\025\uffc6\026\070\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040" +
    "\uffc6\041\uffc6\042\uffc6\051\uffc6\053\uffc6\055\uffc6\001\002" +
    "\000\044\013\uffc8\015\uffc8\016\uffc8\020\uffc8\023\uffc8\024" +
    "\uffc8\025\066\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8" +
    "\041\uffc8\042\uffc8\051\uffc8\053\uffc8\055\uffc8\001\002\000" +
    "\010\013\uffef\020\uffef\023\062\001\002\000\014\024\047" +
    "\031\053\052\046\056\055\057\050\001\002\000\042\013" +
    "\uffcb\015\uffcb\016\uffcb\020\uffcb\023\uffcb\024\064\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\051" +
    "\uffcb\053\uffcb\055\uffcb\001\002\000\014\024\047\031\053" +
    "\052\046\056\055\057\050\001\002\000\044\013\uffc9\015" +
    "\uffc9\016\uffc9\020\uffc9\023\uffc9\024\uffc9\025\066\034\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\051" +
    "\uffc9\053\uffc9\055\uffc9\001\002\000\014\024\047\031\053" +
    "\052\046\056\055\057\050\001\002\000\046\013\uffc7\015" +
    "\uffc7\016\uffc7\020\uffc7\023\uffc7\024\uffc7\025\uffc7\026\070" +
    "\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042" +
    "\uffc7\051\uffc7\053\uffc7\055\uffc7\001\002\000\014\024\047" +
    "\031\053\052\046\056\055\057\050\001\002\000\050\013" +
    "\uffc5\015\uffc5\016\uffc5\020\uffc5\023\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\030\072\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040" +
    "\uffc5\041\uffc5\042\uffc5\051\uffc5\053\uffc5\055\uffc5\001\002" +
    "\000\014\024\047\031\053\052\046\056\055\057\050\001" +
    "\002\000\050\013\uffc3\015\uffc3\016\uffc3\020\uffc3\023\uffc3" +
    "\024\uffc3\025\uffc3\026\uffc3\030\uffc3\034\uffc3\035\uffc3\036" +
    "\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\051\uffc3\053\uffc3" +
    "\055\uffc3\001\002\000\014\024\047\031\053\052\046\056" +
    "\055\057\050\001\002\000\006\023\062\053\076\001\002" +
    "\000\050\013\uffc1\015\uffc1\016\uffc1\020\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\026\uffc1\030\uffc1\034\uffc1\035\uffc1\036\uffc1" +
    "\037\uffc1\040\uffc1\041\uffc1\042\uffc1\051\uffc1\053\uffc1\055" +
    "\uffc1\001\002\000\012\024\047\052\046\056\055\057\050" +
    "\001\002\000\052\013\uffbf\015\uffbf\016\uffbf\020\uffbf\023" +
    "\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\051" +
    "\uffbf\053\uffbf\055\uffbf\001\002\000\052\013\uffbb\015\uffbb" +
    "\016\uffbb\020\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027" +
    "\uffbb\030\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb" +
    "\041\uffbb\042\uffbb\051\uffbb\053\uffbb\055\uffbb\001\002\000" +
    "\006\023\062\053\103\001\002\000\052\013\uffbd\015\uffbd" +
    "\016\uffbd\020\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027" +
    "\uffbd\030\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\042\uffbd\051\uffbd\053\uffbd\055\uffbd\001\002\000" +
    "\006\013\ufff5\020\ufff5\001\002\000\004\055\ufff9\001\002" +
    "\000\004\022\113\001\002\000\006\020\106\055\uffec\001" +
    "\002\000\004\055\uffee\001\002\000\006\020\106\055\uffec" +
    "\001\002\000\004\055\uffed\001\002\000\010\020\uffe9\052" +
    "\114\055\uffe9\001\002\000\016\024\047\031\053\052\046" +
    "\053\uffe6\056\055\057\050\001\002\000\006\020\uffeb\055" +
    "\uffeb\001\002\000\004\053\122\001\002\000\010\023\062" +
    "\051\120\053\uffe8\001\002\000\016\024\047\031\053\052" +
    "\046\053\uffe6\056\055\057\050\001\002\000\004\053\uffe7" +
    "\001\002\000\016\020\uffea\022\uffea\043\uffea\045\uffea\050" +
    "\uffea\055\uffea\001\002\000\004\007\124\001\002\000\004" +
    "\014\220\001\002\000\004\055\126\001\002\000\004\011" +
    "\130\001\002\000\004\055\153\001\002\000\010\044\136" +
    "\046\134\047\137\001\002\000\012\022\uffe2\043\151\045" +
    "\uffe2\055\uffe2\001\002\000\004\043\147\001\002\000\012" +
    "\022\uffde\043\uffde\045\uffde\055\uffde\001\002\000\004\022" +
    "\145\001\002\000\004\055\uffe4\001\002\000\010\044\136" +
    "\046\134\047\137\001\002\000\014\022\uffdc\043\uffdc\045" +
    "\uffdc\052\140\055\uffdc\001\002\000\014\024\047\031\053" +
    "\052\046\056\055\057\050\001\002\000\006\023\062\053" +
    "\142\001\002\000\012\022\uffdd\043\uffdd\045\uffdd\055\uffdd" +
    "\001\002\000\004\045\144\001\002\000\004\043\uffe0\001" +
    "\002\000\014\022\uffe9\043\uffe9\045\uffe9\052\114\055\uffe9" +
    "\001\002\000\012\022\uffdf\043\uffdf\045\uffdf\055\uffdf\001" +
    "\002\000\010\044\136\046\134\047\137\001\002\000\010" +
    "\022\uffe1\045\uffe1\055\uffe1\001\002\000\010\044\136\046" +
    "\134\047\137\001\002\000\010\022\uffe3\045\uffe3\055\uffe3" +
    "\001\002\000\004\012\154\001\002\000\004\022\157\001" +
    "\002\000\006\022\157\055\uffd4\001\002\000\004\055\215" +
    "\001\002\000\010\042\160\050\uffe9\052\114\001\002\000" +
    "\012\021\204\044\uffd8\046\uffd8\047\uffd8\001\002\000\004" +
    "\050\162\001\002\000\014\024\047\031\053\052\163\056" +
    "\055\057\050\001\002\000\014\024\047\031\053\052\163" +
    "\056\055\057\050\001\002\000\010\034\200\035\201\042" +
    "\177\001\002\000\024\023\062\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\042\uffcc\053\uffcc\001\002\000" +
    "\012\036\167\037\170\040\171\041\172\001\002\000\014" +
    "\024\047\031\053\052\046\056\055\057\050\001\002\000" +
    "\014\024\047\031\053\052\046\056\055\057\050\001\002" +
    "\000\014\024\047\031\053\052\046\056\055\057\050\001" +
    "\002\000\014\024\047\031\053\052\046\056\055\057\050" +
    "\001\002\000\012\034\uffd0\035\uffd0\042\uffd0\053\uffd0\001" +
    "\002\000\012\034\uffd1\035\uffd1\042\uffd1\053\uffd1\001\002" +
    "\000\012\034\uffcf\035\uffcf\042\uffcf\053\uffcf\001\002\000" +
    "\012\034\uffce\035\uffce\042\uffce\053\uffce\001\002\000\012" +
    "\021\204\044\uffd8\046\uffd8\047\uffd8\001\002\000\014\024" +
    "\047\031\053\052\163\056\055\057\050\001\002\000\014" +
    "\024\047\031\053\052\163\056\055\057\050\001\002\000" +
    "\012\034\uffd3\035\uffd3\042\uffd3\053\uffd3\001\002\000\012" +
    "\034\uffd2\035\uffd2\042\uffd2\053\uffd2\001\002\000\004\056" +
    "\207\001\002\000\010\044\136\046\134\047\137\001\002" +
    "\000\006\022\uffdb\055\uffdb\001\002\000\010\044\uffd9\046" +
    "\uffd9\047\uffd9\001\002\000\010\034\200\035\201\053\212" +
    "\001\002\000\016\023\062\036\uffcc\037\uffcc\040\uffcc\041" +
    "\uffcc\053\103\001\002\000\012\034\uffcd\035\uffcd\042\uffcd" +
    "\053\uffcd\001\002\000\010\044\136\046\134\047\137\001" +
    "\002\000\006\022\uffda\055\uffda\001\002\000\004\010\216" +
    "\001\002\000\004\002\ufffc\001\002\000\004\055\uffd5\001" +
    "\002\000\014\024\047\031\053\052\046\056\055\057\050" +
    "\001\002\000\006\015\222\023\062\001\002\000\014\024" +
    "\047\031\053\052\046\056\055\057\050\001\002\000\006" +
    "\016\224\023\062\001\002\000\004\052\225\001\002\000" +
    "\014\024\047\031\053\052\046\056\055\057\050\001\002" +
    "\000\006\023\062\051\227\001\002\000\004\056\230\001" +
    "\002\000\004\053\231\001\002\000\014\024\047\031\053" +
    "\052\046\056\055\057\050\001\002\000\006\023\062\055" +
    "\uffe5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\010\002\003\053\005\055\004\001\001\000" +
    "\002\001\001\000\004\003\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\013\001\001\000\004" +
    "\005\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\044\020\050\021\001\001\000\006" +
    "\007\106\052\104\001\001\000\010\045\030\046\032\050" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\046\103\050\031\001\001" +
    "\000\006\047\033\051\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\047\036\051\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\042\001\001\000\002\001\001\000\022\031\044\032\057" +
    "\033\056\034\055\035\060\036\053\037\051\040\050\001" +
    "\001\000\002\001\001\000\022\031\044\032\057\033\056" +
    "\034\055\035\101\036\053\037\051\040\050\001\001\000" +
    "\004\034\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\031\062\032\057\033" +
    "\056\034\055\036\053\037\051\040\050\001\001\000\002" +
    "\001\001\000\016\032\064\033\056\034\055\036\053\037" +
    "\051\040\050\001\001\000\002\001\001\000\014\033\066" +
    "\034\055\036\053\037\051\040\050\001\001\000\002\001" +
    "\001\000\012\034\055\036\070\037\051\040\050\001\001" +
    "\000\002\001\001\000\010\034\055\037\072\040\050\001" +
    "\001\000\002\001\001\000\022\031\044\032\057\033\056" +
    "\034\055\035\074\036\053\037\051\040\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\107\007\110\001\001\000\002\001" +
    "\001\000\006\006\111\007\110\001\001\000\002\001\001" +
    "\000\004\010\114\001\001\000\024\011\115\031\044\032" +
    "\057\033\056\034\055\035\116\036\053\037\051\040\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\011\120\031\044\032\057\033\056\034\055" +
    "\035\116\036\053\037\051\040\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\126\001\001\000" +
    "\002\001\001\000\012\013\130\014\134\015\132\026\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\130" +
    "\014\142\015\132\026\131\001\001\000\002\001\001\000" +
    "\022\031\044\032\057\033\056\034\055\035\140\036\053" +
    "\037\051\040\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\145" +
    "\001\001\000\002\001\001\000\012\013\130\014\147\015" +
    "\132\026\131\001\001\000\002\001\001\000\012\013\130" +
    "\014\151\015\132\026\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\154\024\155\001\001\000\006" +
    "\023\154\024\216\001\001\000\002\001\001\000\004\010" +
    "\160\001\001\000\004\025\212\001\001\000\002\001\001" +
    "\000\026\027\163\030\165\031\044\032\057\033\056\034" +
    "\055\035\164\036\053\037\051\040\050\001\001\000\026" +
    "\027\207\030\165\031\044\032\057\033\056\034\055\035" +
    "\210\036\053\037\051\040\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\030\175\031" +
    "\044\032\057\033\056\034\055\035\164\036\053\037\051" +
    "\040\050\001\001\000\024\030\174\031\044\032\057\033" +
    "\056\034\055\035\164\036\053\037\051\040\050\001\001" +
    "\000\024\030\173\031\044\032\057\033\056\034\055\035" +
    "\164\036\053\037\051\040\050\001\001\000\024\030\172" +
    "\031\044\032\057\033\056\034\055\035\164\036\053\037" +
    "\051\040\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\204\001" +
    "\001\000\026\027\202\030\165\031\044\032\057\033\056" +
    "\034\055\035\164\036\053\037\051\040\050\001\001\000" +
    "\026\027\201\030\165\031\044\032\057\033\056\034\055" +
    "\035\164\036\053\037\051\040\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\130" +
    "\014\205\015\132\026\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\013\130\014\213\015\132\026\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\031\044\032\057\033\056\034" +
    "\055\035\220\036\053\037\051\040\050\001\001\000\002" +
    "\001\001\000\022\031\044\032\057\033\056\034\055\035" +
    "\222\036\053\037\051\040\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\031\044\032\057\033\056\034" +
    "\055\035\225\036\053\037\051\040\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\031" +
    "\044\032\057\033\056\034\055\035\231\036\053\037\051" +
    "\040\050\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) + " Columna " + s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {



    TablaTipos tabla;

    LSystem lsystem;

    void setTitulo(String nombrePrograma){
        tabla.setNombrePrograma(nombrePrograma);
    }

    void inicializar(){
        tabla = new TablaTipos();
        lsystem = new LSystem();
    }

    void addSimbolo(String nombre, String tipoBase, Float valor){
        tabla.agregaTipo(nombre, tipoBase, valor);
    }

    boolean existeSimbolo(String nombre){
        return tabla.existeTipo(nombre);
    }

    Tipo getTipo(String nombre){
        return tabla.getTipo(nombre);
    }

    void print(){
        tabla.print();
    }

    void addSymbol(String s){
        lsystem.addSimbolo(s);
    }
    
    void addMatriz(String m){
        lsystem.addMatriz(m);
    }
    
    void addGeneratriz(String g){
        lsystem.addGeneratriz(g);
    }
    
    
    void addMove(String m){
         lsystem.addMove(m);
    }
    void addCon(String c){
         lsystem.addCon(c);
    }
    
    void addNumop(String n){
         lsystem.addNumop(n);
    }

    void setPasos(int pasos) {
         lsystem.setPasos(pasos);
    }

    void setAngulo(int angulo) {
        lsystem.setAngulo(angulo);
    }

    void setProbabilidad(int probabilidad) {
        lsystem.setProbabilidad(probabilidad);
    }

    void imprimirLSystem(){
        lsystem.imprimir();
    }

    String traducir(String m){
        return lsystem.traducir(m);
    }

    void test(){
      System.out.println("Dibujando");
    }
    void dibujar(){
        System.out.println("Dibujando");
        Dibujar.dibujar();
    }
     




  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr_h ::= NOM_PARAM 
            {
              Float RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                            if(!existeSimbolo(n)){
                                System.out.println("ERROR SEMANTICO! " + n + " no se encuantra declarada");
                                System.exit(0);
                            }
                            RESULT=new Float(getTipo(n).getValor()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_h",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr_h ::= OP_RESTA expr_h 
            {
              Float RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Float(0-r.floatValue());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_h",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr_h ::= NUMERO 
            {
              Float RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=n; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_h",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr_h ::= LP expr_e RP 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_h",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr_k ::= expr_h 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_k",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr_k ::= expr_k OP_MOD expr_h 
            {
              Float RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Float(l.floatValue() % r.floatValue());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_k",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr_j ::= expr_k 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_j",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr_j ::= OP_LOG LP expr_e RP 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Float((int) Math.log(e));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_j",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr_i ::= expr_j 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_i",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr_i ::= expr_i OP_POTENCIA expr_j 
            {
              Float RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT= new Float((int) Math.pow(l.floatValue(),r.floatValue()));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_i",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr_g ::= expr_i 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_g",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr_g ::= expr_g OP_DIVISION expr_i 
            {
              Float RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Float(l.floatValue() / r.floatValue()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_g",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr_f ::= expr_g 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_f",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr_f ::= expr_f OP_PRODUCTO expr_g 
            {
              Float RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Float(l.floatValue() * r.floatValue()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_f",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_t ::= expr_f 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_t",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr_t ::= expr_t OP_RESTA expr_f 
            {
              Float RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Float(l.floatValue() - r.floatValue()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_t",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr_e ::= expr_t 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_e",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr_e ::= expr_e OP_SUMA expr_t 
            {
              Float RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Float(l.floatValue() + r.floatValue()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_e",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr_part ::= expr_e 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_part",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr_log ::= LP expr_log RP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_log",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr_log ::= expr_part OP_MENOR expr_part 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_log",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr_log ::= expr_part OP_MAYOR expr_part 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_log",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr_log ::= expr_part OP_DIF expr_part 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_log",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr_log ::= expr_part OP_IGUAL expr_part 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_log",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr_log ::= expr_log OP_AND expr_log 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_log",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr_log ::= expr_log OP_OR expr_log 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_log",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // list_gen ::= generatriz 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("list_gen",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // list_gen ::= generatriz list_gen 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("list_gen",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // movs_generatriz ::= movimientos 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("movs_generatriz",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // movs_generatriz ::= mov_generatriz DOBLERAYA movs_generatriz 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("movs_generatriz",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // probabilidad ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("probabilidad",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // probabilidad ::= PROBABILIDAD NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = String.valueOf(n); setProbabilidad(Math.round(n));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("probabilidad",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // generatriz ::= NOM_SIMBOL FLECHA probabilidad movimientos 
            {
              String RESULT =null;
		int nsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String ns = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ns + f + p +m; addGeneratriz(traducir(RESULT));  dibujar();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("generatriz",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // generatriz ::= NOM_SIMBOL list_param DOSPTS expr_log FLECHA probabilidad movimientos 
            {
              String RESULT =null;
		int nsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String ns = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String dp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ns + lp +dp+ el + f + p +m;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("generatriz",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // turn ::= TURN 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = t; addCon(traducir(t)); addNumop(traducir(t));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("turn",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // turn ::= TURN LP expr_e RP 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("turn",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // movimiento ::= turn 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = t; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("movimiento",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // movimiento ::= MOV NOM_SIMBOL list_param 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int nsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String ns = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = m + ns; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("movimiento",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // mov_emp ::= PUSH movimientos POP 
            {
              Object RESULT =null;
		int puleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int puright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String pu = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int mvleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int mvright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mv = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int poleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int poright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String po = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=pu + mv + po; addCon(traducir(pu)); addCon(traducir(po)); addNumop(traducir(pu)); addNumop(traducir(po));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("mov_emp",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // movimientos ::= mov_emp DOBLERAYA movimientos 
            {
              String RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int drleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int drright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String dr = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int mvleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mvright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String mv = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = me + dr + mv;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("movimientos",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // movimientos ::= movimiento 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = m; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("movimientos",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // movimientos ::= movimiento DOBLERAYA movimientos 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int drleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int drright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String dr = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int mvleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mvright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String mv = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=m + dr + mv;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("movimientos",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // matriz ::= MATRIZ movimientos 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = e; addMatriz(traducir(e));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("matriz",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condiciones ::= CONDICIONES PASOS expr_e ANGULO expr_e POSICION LP expr_e COMA NUMERO RP expr_e 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Float p = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Float a = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int aileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int airight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float ai = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                                                            if((p % 1 != 0) || (p < 0)){
                                                                                                                System.out.println("ERROR SEMANTICO! la cantidad de pasos debe ser un numero natural mayor que 0");
                                                                                                                System.exit(0);
                                                                                                            }
                                                                                                            if(a > 90){
                                                                                                                System.out.println("ERROR SEMANTICO! el angulo debe estar entre 0 y 90");
                                                                                                                System.exit(0);
                                                                                                            }
                                                                                                            if(!((ai < 180) && (ai > 0))){
                                                                                                                System.out.println("ERROR SEMANTICO! el angulo de posicion inicial debe estar entre 0 y 180");
                                                                                                                System.exit(0);
                                                                                                            }
                                                                                                            setPasos(Math.round(p));
                                                                                                            setAngulo(Math.round(a));

                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condiciones",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // param ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("param",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // param ::= expr_e COMA param 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("param",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // param ::= expr_e 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("param",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // list_param ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("list_param",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // list_param ::= LP param RP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("list_param",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // simbolo ::= SIMBOLO NOM_SIMBOL list_param 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                if(existeSimbolo(l)){
                                                    System.out.println("ERROR! " + l + " declarada previamente");
                                                    System.exit(0);
                                                }
                                                else{
                                                    addSimbolo(l, "Simbolo", null);
                                                    addSymbol(l);
                                                    addNumop(l);
                                                }
                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolo",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // simbolos ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // simbolos ::= simbolo simbolos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // list_simb ::= simbolo simbolos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("list_simb",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr_assign ::= OP_ASSIGN expr_e 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_assign",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcion ::= PARAMETRO NOM_PARAM DOSPTS TYPE expr_assign 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // valor ::= PARAMETRO NOM_PARAM DOSPTS TYPE VALOR NUMERO 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                    if (t.equals("Int"))
                                                                        if(n % 1 > 0){
                                                                            System.out.println("ERROR! no se puede guardar " + n + " en tipo Int");
                                                                            System.exit(0);
                                                                        }
                                                                    if(existeSimbolo(l)){
                                                                        System.out.println("ERROR! " + l + " declarada previamente");
                                                                        System.exit(0);
                                                                    }
                                                                    else
                                                                        addSimbolo(l, t, n);
                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // paramfunc ::= 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("paramfunc",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // paramfunc ::= funcion paramfunc 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("paramfunc",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // paramvariables ::= 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("paramvariables",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // paramvariables ::= valor paramvariables 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("paramvariables",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametros ::= paramvariables paramfunc 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sec_param ::= 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sec_param",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sec_param ::= valor parametros 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sec_param",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // gramatica ::= GRAMATICA sec_param list_simb 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("gramatica",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // comentarios ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comentarios",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // comentarios ::= COMENTARIOS DOBLESALTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comentarios",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // secciones ::= TITULO NT$1 DOBLESALTO comentarios gramatica DOBLESALTO condiciones DOBLESALTO matriz DOBLESALTO GENERATRIZ list_gen DOBLESALTO FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("secciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
setTitulo(t);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= NT$0 secciones 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
inicializar();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // dibujar ::= program 
            {
              Object RESULT =null;
		dibujar();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dibujar",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= dibujar EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

