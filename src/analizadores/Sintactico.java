
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 20 01:27:29 VET 2017
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import utilidades.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 20 01:27:29 VET 2017
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\055\003\000\002\057" +
    "\002\000\002\002\004\000\002\060\002\000\002\061\002" +
    "\000\002\003\017\000\002\004\005\000\002\044\004\000" +
    "\002\044\004\000\002\044\002\000\002\050\010\000\002" +
    "\051\010\000\002\045\004\000\002\005\004\000\002\005" +
    "\002\000\002\052\005\000\002\053\005\000\002\053\002" +
    "\000\002\006\003\000\002\006\005\000\002\006\002\000" +
    "\002\007\016\000\002\013\004\000\002\011\005\000\002" +
    "\011\003\000\002\011\005\000\002\023\005\000\002\010" +
    "\005\000\002\010\003\000\002\012\006\000\002\012\003" +
    "\000\002\020\011\000\002\020\006\000\002\022\004\000" +
    "\002\022\002\000\002\017\005\000\002\017\003\000\002" +
    "\021\005\000\002\021\004\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\037\005" +
    "\000\002\037\005\000\002\037\005\000\002\037\005\000" +
    "\002\037\004\000\002\037\005\000\002\024\005\000\002" +
    "\024\003\000\002\025\005\000\002\025\003\000\002\026" +
    "\005\000\002\026\003\000\002\027\005\000\002\027\003" +
    "\000\002\031\005\000\002\031\003\000\002\032\006\000" +
    "\002\032\003\000\002\033\005\000\002\033\003\000\002" +
    "\030\005\000\002\030\003\000\002\030\004\000\002\030" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\004\004\uffff\001\002\000\004\002\000\001" +
    "\002\000\004\004\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\057\ufffd\001\002\000" +
    "\004\002\ufffe\001\002\000\004\057\013\001\002\000\004" +
    "\005\015\001\002\000\004\057\ufffc\001\002\000\006\012" +
    "\020\017\ufff7\001\002\000\006\012\020\017\ufff7\001\002" +
    "\000\004\017\071\001\002\000\004\061\023\001\002\000" +
    "\006\012\020\017\ufff7\001\002\000\004\017\ufff9\001\002" +
    "\000\004\052\024\001\002\000\004\056\025\001\002\000" +
    "\006\016\026\031\027\001\002\000\004\060\067\001\002" +
    "\000\014\023\032\030\036\054\031\060\041\061\033\001" +
    "\002\000\046\012\uffce\014\uffce\015\uffce\017\uffce\022\uffce" +
    "\023\047\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040" +
    "\uffce\041\uffce\042\uffce\044\uffce\053\uffce\055\uffce\057\uffce" +
    "\001\002\000\014\023\032\030\036\054\031\060\041\061" +
    "\033\001\002\000\012\023\032\054\031\060\041\061\033" +
    "\001\002\000\056\012\uffbe\014\uffbe\015\uffbe\017\uffbe\022" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\033\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\044\uffbe\053\uffbe\055\uffbe\057\uffbe\001\002\000\056" +
    "\012\uffc4\014\uffc4\015\uffc4\017\uffc4\022\uffc4\023\uffc4\024" +
    "\uffc4\025\uffc4\026\062\027\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\044\uffc4\053" +
    "\uffc4\055\uffc4\057\uffc4\001\002\000\054\012\uffc6\014\uffc6" +
    "\015\uffc6\017\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\027" +
    "\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\044\uffc6\053\uffc6\055\uffc6\057\uffc6\001" +
    "\002\000\004\054\057\001\002\000\054\012\uffc8\014\uffc8" +
    "\015\uffc8\017\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\027" +
    "\055\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8" +
    "\041\uffc8\042\uffc8\044\uffc8\053\uffc8\055\uffc8\057\uffc8\001" +
    "\002\000\056\012\uffc2\014\uffc2\015\uffc2\017\uffc2\022\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\033\uffc2\034" +
    "\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2" +
    "\044\uffc2\053\uffc2\055\uffc2\057\uffc2\001\002\000\056\012" +
    "\uffc0\014\uffc0\015\uffc0\017\uffc0\022\uffc0\023\uffc0\024\uffc0" +
    "\025\uffc0\026\uffc0\027\uffc0\033\uffc0\034\uffc0\035\uffc0\036" +
    "\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\044\uffc0\053\uffc0" +
    "\055\uffc0\057\uffc0\001\002\000\052\012\uffca\014\uffca\015" +
    "\uffca\017\uffca\022\uffca\023\uffca\024\uffca\025\053\033\uffca" +
    "\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042" +
    "\uffca\044\uffca\053\uffca\055\uffca\057\uffca\001\002\000\050" +
    "\012\uffcc\014\uffcc\015\uffcc\017\uffcc\022\uffcc\023\uffcc\024" +
    "\051\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\042\uffcc\044\uffcc\053\uffcc\055\uffcc\057\uffcc\001" +
    "\002\000\010\012\ufff5\017\ufff5\022\045\001\002\000\014" +
    "\023\032\030\036\054\031\060\041\061\033\001\002\000" +
    "\046\012\uffcf\014\uffcf\015\uffcf\017\uffcf\022\uffcf\023\047" +
    "\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\042\uffcf\044\uffcf\053\uffcf\055\uffcf\057\uffcf\001\002" +
    "\000\014\023\032\030\036\054\031\060\041\061\033\001" +
    "\002\000\050\012\uffcd\014\uffcd\015\uffcd\017\uffcd\022\uffcd" +
    "\023\uffcd\024\051\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037" +
    "\uffcd\040\uffcd\041\uffcd\042\uffcd\044\uffcd\053\uffcd\055\uffcd" +
    "\057\uffcd\001\002\000\014\023\032\030\036\054\031\060" +
    "\041\061\033\001\002\000\052\012\uffcb\014\uffcb\015\uffcb" +
    "\017\uffcb\022\uffcb\023\uffcb\024\uffcb\025\053\033\uffcb\034" +
    "\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb" +
    "\044\uffcb\053\uffcb\055\uffcb\057\uffcb\001\002\000\014\023" +
    "\032\030\036\054\031\060\041\061\033\001\002\000\054" +
    "\012\uffc9\014\uffc9\015\uffc9\017\uffc9\022\uffc9\023\uffc9\024" +
    "\uffc9\025\uffc9\027\055\033\uffc9\034\uffc9\035\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\044\uffc9\053\uffc9\055" +
    "\uffc9\057\uffc9\001\002\000\014\023\032\030\036\054\031" +
    "\060\041\061\033\001\002\000\054\012\uffc7\014\uffc7\015" +
    "\uffc7\017\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\027\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\042\uffc7\044\uffc7\053\uffc7\055\uffc7\057\uffc7\001\002" +
    "\000\014\023\032\030\036\054\031\060\041\061\033\001" +
    "\002\000\006\022\045\055\061\001\002\000\054\012\uffc5" +
    "\014\uffc5\015\uffc5\017\uffc5\022\uffc5\023\uffc5\024\uffc5\025" +
    "\uffc5\027\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\044\uffc5\053\uffc5\055\uffc5\057" +
    "\uffc5\001\002\000\012\023\032\054\031\060\041\061\033" +
    "\001\002\000\056\012\uffc3\014\uffc3\015\uffc3\017\uffc3\022" +
    "\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\033\uffc3" +
    "\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042" +
    "\uffc3\044\uffc3\053\uffc3\055\uffc3\057\uffc3\001\002\000\056" +
    "\012\uffbf\014\uffbf\015\uffbf\017\uffbf\022\uffbf\023\uffbf\024" +
    "\uffbf\025\uffbf\026\uffbf\027\uffbf\033\uffbf\034\uffbf\035\uffbf" +
    "\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\044\uffbf\053" +
    "\uffbf\055\uffbf\057\uffbf\001\002\000\006\022\045\055\066" +
    "\001\002\000\056\012\uffc1\014\uffc1\015\uffc1\017\uffc1\022" +
    "\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042" +
    "\uffc1\044\uffc1\053\uffc1\055\uffc1\057\uffc1\001\002\000\006" +
    "\012\ufff6\017\ufff6\001\002\000\004\057\ufffa\001\002\000" +
    "\004\021\076\001\002\000\006\017\071\057\ufff2\001\002" +
    "\000\006\017\071\057\ufff2\001\002\000\004\057\ufff4\001" +
    "\002\000\004\057\ufff3\001\002\000\010\017\uffef\054\077" +
    "\057\uffef\001\002\000\016\023\032\030\036\054\031\055" +
    "\uffec\060\041\061\033\001\002\000\006\017\ufff1\057\ufff1" +
    "\001\002\000\004\055\105\001\002\000\010\022\045\053" +
    "\103\055\uffee\001\002\000\016\023\032\030\036\054\031" +
    "\055\uffec\060\041\061\033\001\002\000\004\055\uffed\001" +
    "\002\000\014\017\ufff0\045\ufff0\047\ufff0\052\ufff0\057\ufff0" +
    "\001\002\000\004\017\ufff8\001\002\000\004\057\110\001" +
    "\002\000\004\006\111\001\002\000\004\013\212\001\002" +
    "\000\004\057\113\001\002\000\004\010\115\001\002\000" +
    "\004\057\140\001\002\000\010\046\123\050\121\051\124" +
    "\001\002\000\010\045\136\047\uffe8\057\uffe8\001\002\000" +
    "\004\045\134\001\002\000\010\045\uffe4\047\uffe4\057\uffe4" +
    "\001\002\000\004\021\132\001\002\000\004\057\uffea\001" +
    "\002\000\010\046\123\050\121\051\124\001\002\000\012" +
    "\045\uffe2\047\uffe2\054\125\057\uffe2\001\002\000\014\023" +
    "\032\030\036\054\031\060\041\061\033\001\002\000\006" +
    "\022\045\055\127\001\002\000\010\045\uffe3\047\uffe3\057" +
    "\uffe3\001\002\000\004\047\131\001\002\000\004\045\uffe6" +
    "\001\002\000\012\045\uffef\047\uffef\054\077\057\uffef\001" +
    "\002\000\010\045\uffe5\047\uffe5\057\uffe5\001\002\000\010" +
    "\046\123\050\121\051\124\001\002\000\006\047\uffe7\057" +
    "\uffe7\001\002\000\010\046\123\050\121\051\124\001\002" +
    "\000\006\047\uffe9\057\uffe9\001\002\000\004\011\141\001" +
    "\002\000\004\021\144\001\002\000\004\007\211\001\002" +
    "\000\004\057\207\001\002\000\010\044\145\052\uffef\054" +
    "\077\001\002\000\012\020\176\046\uffde\050\uffde\051\uffde" +
    "\001\002\000\004\052\147\001\002\000\016\023\032\030" +
    "\036\043\152\054\150\060\041\061\033\001\002\000\016" +
    "\023\032\030\036\043\152\054\150\060\041\061\033\001" +
    "\002\000\010\033\171\034\172\044\175\001\002\000\016" +
    "\023\032\030\036\043\152\054\150\060\041\061\033\001" +
    "\002\000\020\022\045\035\154\036\161\037\155\040\156" +
    "\041\157\042\160\001\002\000\014\023\032\030\036\054" +
    "\031\060\041\061\033\001\002\000\014\023\032\030\036" +
    "\054\031\060\041\061\033\001\002\000\014\023\032\030" +
    "\036\054\031\060\041\061\033\001\002\000\014\023\032" +
    "\030\036\054\031\060\041\061\033\001\002\000\014\023" +
    "\032\030\036\054\031\060\041\061\033\001\002\000\014" +
    "\023\032\030\036\054\031\060\041\061\033\001\002\000" +
    "\014\022\045\033\uffd3\034\uffd3\044\uffd3\055\uffd3\001\002" +
    "\000\014\022\045\033\uffd6\034\uffd6\044\uffd6\055\uffd6\001" +
    "\002\000\014\022\045\033\uffd7\034\uffd7\044\uffd7\055\uffd7" +
    "\001\002\000\014\022\045\033\uffd5\034\uffd5\044\uffd5\055" +
    "\uffd5\001\002\000\014\022\045\033\uffd4\034\uffd4\044\uffd4" +
    "\055\uffd4\001\002\000\014\022\045\033\uffd2\034\uffd2\044" +
    "\uffd2\055\uffd2\001\002\000\012\033\uffd1\034\uffd1\044\uffd1" +
    "\055\uffd1\001\002\000\016\023\032\030\036\043\152\054" +
    "\150\060\041\061\033\001\002\000\016\023\032\030\036" +
    "\043\152\054\150\060\041\061\033\001\002\000\012\033" +
    "\uffd9\034\uffd9\044\uffd9\055\uffd9\001\002\000\012\033\uffd8" +
    "\034\uffd8\044\uffd8\055\uffd8\001\002\000\012\020\176\046" +
    "\uffde\050\uffde\051\uffde\001\002\000\004\060\201\001\002" +
    "\000\010\046\123\050\121\051\124\001\002\000\004\057" +
    "\uffe1\001\002\000\010\046\uffdf\050\uffdf\051\uffdf\001\002" +
    "\000\010\033\171\034\172\055\204\001\002\000\022\022" +
    "\045\035\154\036\161\037\155\040\156\041\157\042\160" +
    "\055\066\001\002\000\012\033\uffd0\034\uffd0\044\uffd0\055" +
    "\uffd0\001\002\000\010\046\123\050\121\051\124\001\002" +
    "\000\004\057\uffe0\001\002\000\006\007\uffda\021\144\001" +
    "\002\000\004\007\uffdb\001\002\000\004\002\ufffb\001\002" +
    "\000\014\023\032\030\036\054\031\060\041\061\033\001" +
    "\002\000\006\014\214\022\045\001\002\000\014\023\032" +
    "\030\036\054\031\060\041\061\033\001\002\000\006\015" +
    "\216\022\045\001\002\000\004\054\217\001\002\000\014" +
    "\023\032\030\036\054\031\060\041\061\033\001\002\000" +
    "\006\022\045\053\221\001\002\000\004\060\222\001\002" +
    "\000\004\055\223\001\002\000\014\023\032\030\036\054" +
    "\031\060\041\061\033\001\002\000\006\022\045\057\uffeb" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\010\002\003\055\005\057\004\001\001\000" +
    "\002\001\001\000\004\003\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\060\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\013\001\001\000\004" +
    "\061\106\001\001\000\010\044\016\050\020\051\015\001" +
    "\001\000\010\044\105\050\020\051\015\001\001\000\006" +
    "\045\067\052\071\001\001\000\002\001\001\000\010\044" +
    "\021\050\020\051\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\024\043\025\027\026\042\027\041\030\037" +
    "\031\036\032\034\033\033\001\001\000\002\001\001\000" +
    "\022\024\064\025\027\026\042\027\041\030\037\031\036" +
    "\032\034\033\033\001\001\000\004\030\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\025\045\026\042\027\041\030\037\031\036\032" +
    "\034\033\033\001\001\000\002\001\001\000\016\026\047" +
    "\027\041\030\037\031\036\032\034\033\033\001\001\000" +
    "\002\001\001\000\014\027\051\030\037\031\036\032\034" +
    "\033\033\001\001\000\002\001\001\000\012\030\037\031" +
    "\053\032\034\033\033\001\001\000\002\001\001\000\010" +
    "\030\037\032\055\033\033\001\001\000\002\001\001\000" +
    "\022\024\057\025\027\026\042\027\041\030\037\031\036" +
    "\032\034\033\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\073" +
    "\052\072\001\001\000\006\005\074\052\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\053\077\001\001" +
    "\000\024\006\100\024\101\025\027\026\042\027\041\030" +
    "\037\031\036\032\034\033\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\006\103\024" +
    "\101\025\027\026\042\027\041\030\037\031\036\032\034" +
    "\033\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\113\001" +
    "\001\000\002\001\001\000\012\010\115\011\121\012\117" +
    "\023\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\115\011\127\012\117\023\116\001\001\000\002\001" +
    "\001\000\022\024\125\025\027\026\042\027\041\030\037" +
    "\031\036\032\034\033\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\132\001\001\000\002\001\001\000\012\010\115\011" +
    "\134\012\117\023\116\001\001\000\002\001\001\000\012" +
    "\010\115\011\136\012\117\023\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\142\021\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\145\001" +
    "\001\000\004\022\204\001\001\000\002\001\001\000\024" +
    "\024\152\025\027\026\042\027\041\030\037\031\036\032" +
    "\034\033\033\037\150\001\001\000\024\024\202\025\027" +
    "\026\042\027\041\030\037\031\036\032\034\033\033\037" +
    "\201\001\001\000\002\001\001\000\024\024\152\025\027" +
    "\026\042\027\041\030\037\031\036\032\034\033\033\037" +
    "\167\001\001\000\002\001\001\000\022\024\166\025\027" +
    "\026\042\027\041\030\037\031\036\032\034\033\033\001" +
    "\001\000\022\024\165\025\027\026\042\027\041\030\037" +
    "\031\036\032\034\033\033\001\001\000\022\024\164\025" +
    "\027\026\042\027\041\030\037\031\036\032\034\033\033" +
    "\001\001\000\022\024\163\025\027\026\042\027\041\030" +
    "\037\031\036\032\034\033\033\001\001\000\022\024\162" +
    "\025\027\026\042\027\041\030\037\031\036\032\034\033" +
    "\033\001\001\000\022\024\161\025\027\026\042\027\041" +
    "\030\037\031\036\032\034\033\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\024\152\025\027\026\042\027\041\030\037\031\036" +
    "\032\034\033\033\037\173\001\001\000\024\024\152\025" +
    "\027\026\042\027\041\030\037\031\036\032\034\033\033" +
    "\037\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\176\001\001\000\002\001\001\000\012\010\115" +
    "\011\177\012\117\023\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\115\011\205\012\117\023\116\001" +
    "\001\000\002\001\001\000\006\020\142\021\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\024\212\025" +
    "\027\026\042\027\041\030\037\031\036\032\034\033\033" +
    "\001\001\000\002\001\001\000\022\024\214\025\027\026" +
    "\042\027\041\030\037\031\036\032\034\033\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\024\217\025" +
    "\027\026\042\027\041\030\037\031\036\032\034\033\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\024\223\025\027\026\042\027\041\030\037" +
    "\031\036\032\034\033\033\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Método al que se llama automáticamente ante algún error sintactico recuperable.
    public void syntax_error(Symbol s){ } 

    // Método al que se llama automáticamente ante algún error sintáctico irrecuperable. 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        /*
        String a = (String) s.value;
        char c = a.charAt(0);
        String b = String.format("%04x", (int) c);
        System.out.println("Error síntactico ("+s.left+", "+s.right+") componente: "+s.value+" hex: "+b);
        */
        System.out.println("Error síntactico en Línea " + s.left + " Columna " + s.right + ". \"" + s.value + "\" no se esperaba."); 
    }  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {



    TablaTipos tabla;

    LSystem lsystem;

    void setTitulo(String nombrePrograma){
        tabla.setNombrePrograma(nombrePrograma);
    }

    void inicializar(){
        tabla = new TablaTipos();
        lsystem = new LSystem();
    }

    void addSimbolo(String nombre, String tipoBase, Float valor){
        tabla.agregaTipo(nombre, tipoBase, valor);
    }

    boolean existeSimbolo(String nombre){
        return tabla.existeTipo(nombre);
    }

    Tipo getTipo(String nombre){
        return tabla.getTipo(nombre);
    }

    void print(){
        tabla.print();
    }

    void addSymbol(String s){
        lsystem.addSimbolo(s);
    }
    
    void addMatriz(String m){
        lsystem.addMatriz(m);
    }
    
    void addGeneratriz(String g){
        lsystem.addGeneratriz(g);
    }
    
    
    void addMove(String m){
         lsystem.addMove(m);
    }
    void addCon(String c){
         lsystem.addCon(c);
    }
    
    void addNumop(String n){
         lsystem.addNumop(n);
    }

    void setPasos(int pasos) {
         lsystem.setPasos(pasos);
    }

    void setAngulo(int angulo) {
        lsystem.setAngulo(angulo);
    }

    void setProbabilidad(int probabilidad) {
        lsystem.setProbabilidad(probabilidad);
    }

    void imprimirLSystem(){
        lsystem.imprimir();
    }

    String traducir(String m){
        return lsystem.traducir(m);
    }

    void test(){
      System.out.println("Dibujando");
    }
    void dibujar(){
        System.out.println("Dibujando");
        Dibujar.dibujar();
    }
     




  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr_h ::= NOM_PARAM 
            {
              Float RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                            if(!existeSimbolo(n)){
                                System.out.println("ERROR SEMANTICO! " + n + " no se encuantra declarada");
                                System.exit(0);
                            }
                            RESULT=new Float(getTipo(n).getValor()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_h",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr_h ::= OP_RESTA expr_h 
            {
              Float RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Float(0-r.floatValue());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_h",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr_h ::= NUMERO 
            {
              Float RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=n; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_h",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr_h ::= LP expr_e RP 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_h",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr_k ::= expr_h 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_k",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr_k ::= expr_k OP_MOD expr_h 
            {
              Float RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Float(l.floatValue() % r.floatValue());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_k",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr_j ::= expr_k 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_j",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr_j ::= OP_LOG LP expr_e RP 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Float((float) Math.log(e));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_j",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr_i ::= expr_j 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_i",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr_i ::= expr_i OP_POTENCIA expr_j 
            {
              Float RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT= new Float((float) Math.pow(l.floatValue(),r.floatValue()));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_i",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_g ::= expr_i 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_g",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr_g ::= expr_g OP_DIVISION expr_i 
            {
              Float RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Float(l.floatValue() / r.floatValue()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_g",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr_f ::= expr_g 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_f",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr_f ::= expr_f OP_PRODUCTO expr_g 
            {
              Float RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Float(l.floatValue() * r.floatValue()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_f",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr_t ::= expr_f 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_t",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr_t ::= expr_t OP_RESTA expr_f 
            {
              Float RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Float(l.floatValue() - r.floatValue()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_t",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr_e ::= expr_t 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_e",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr_e ::= expr_e OP_SUMA expr_t 
            {
              Float RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Float(l.floatValue() + r.floatValue()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_e",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr_log ::= LP expr_log RP 
            {
              Boolean RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_log",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr_log ::= OP_NOT expr_log 
            {
              Boolean RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=(!e); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_log",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr_log ::= expr_e OP_MENOR expr_e 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=(l < r); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_log",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr_log ::= expr_e OP_MENOR_IG expr_e 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=(l <= r); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_log",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr_log ::= expr_e OP_MAYOR_IG expr_e 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=(l >= r); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_log",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr_log ::= expr_e OP_MAYOR expr_e 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=(l > r); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_log",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr_log ::= expr_e OP_DIF expr_e 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT= (l != r); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_log",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr_log ::= expr_e OP_IGUAL expr_e 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT= (l == r); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_log",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr_log ::= expr_log OP_AND expr_log 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Boolean l = (Boolean)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Boolean r = (Boolean)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=(l && r); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_log",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr_log ::= expr_log OP_OR expr_log 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Boolean l = (Boolean)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Boolean r = (Boolean)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=(l || r); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_log",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // list_gen ::= generatriz DOBLESALTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("list_gen",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // list_gen ::= generatriz DOBLESALTO list_gen 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("list_gen",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // movs_generatriz ::= movimientos 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("movs_generatriz",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // movs_generatriz ::= mov_generatriz DOBLERAYA movs_generatriz 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("movs_generatriz",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // probabilidad ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("probabilidad",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // probabilidad ::= PROBABILIDAD NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = String.valueOf(n); setProbabilidad(Math.round(n));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("probabilidad",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // generatriz ::= NOM_SIMBOL FLECHA probabilidad movimientos 
            {
              String RESULT =null;
		int nsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String ns = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ns + f + p +m; addGeneratriz(traducir(RESULT));  dibujar();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("generatriz",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // generatriz ::= NOM_SIMBOL list_param DOSPTS expr_log FLECHA probabilidad movimientos 
            {
              String RESULT =null;
		int nsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String ns = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String dp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Boolean el = (Boolean)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = ns + lp +dp+ el + f + p +m;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("generatriz",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // turn ::= TURN 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = t; addCon(traducir(t)); addNumop(traducir(t));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("turn",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // turn ::= TURN LP expr_e RP 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("turn",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // movimiento ::= turn 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = t; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("movimiento",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // movimiento ::= MOV NOM_SIMBOL list_param 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int nsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String ns = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = m + ns + lp;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("movimiento",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // mov_emp ::= PUSH movimientos POP 
            {
              Object RESULT =null;
		int puleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int puright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String pu = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int mvleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int mvright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mv = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int poleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int poright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String po = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=pu + mv + po;  addCon(traducir(pu)); addCon(traducir(po)); addNumop(traducir(pu)); addNumop(traducir(po));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("mov_emp",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // movimientos ::= mov_emp DOBLERAYA movimientos 
            {
              String RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int drleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int drright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String dr = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int mvleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mvright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String mv = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = me + dr + mv;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("movimientos",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // movimientos ::= movimiento 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = m; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("movimientos",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // movimientos ::= movimiento DOBLERAYA movimientos 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int drleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int drright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String dr = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int mvleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mvright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String mv = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=m + dr + mv;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("movimientos",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // matriz ::= MATRIZ movimientos 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = e; addMatriz(traducir(e));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("matriz",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // condiciones ::= CONDICIONES PASOS expr_e ANGULO expr_e POSICION LP expr_e COMA NUMERO RP expr_e 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Float p = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Float a = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int aileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int airight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float ai = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                                                            if((p % 1 != 0) || (p < 0)){
                                                                                                                System.out.println("ERROR SEMANTICO! la cantidad de pasos debe ser un numero natural mayor que 0");
                                                                                                                System.exit(0);
                                                                                                            }
                                                                                                            if(a > 90){
                                                                                                                System.out.println("ERROR SEMANTICO! el angulo debe estar entre 0 y 90");
                                                                                                                System.exit(0);
                                                                                                            }
                                                                                                            if(!((ai < 180) && (ai > 0))){
                                                                                                                System.out.println("ERROR SEMANTICO! el angulo de posicion inicial debe estar entre 0 y 180");
                                                                                                                System.exit(0);
                                                                                                            }
                                                                                                            setPasos(Math.round(p));
                                                                                                            setAngulo(Math.round(a));

                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condiciones",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // param ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("param",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // param ::= expr_e COMA param 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("param",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // param ::= expr_e 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("param",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // list_param ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("list_param",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // list_param ::= LP param RP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("list_param",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // simbolo ::= SIMBOLO NOM_SIMBOL list_param 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                if(existeSimbolo(l)){
                                                    System.out.println("ERROR! " + l + " declarada previamente");
                                                    System.exit(0);
                                                }
                                                else{
                                                    addSimbolo(l, "Simbolo", null);
                                                    addSymbol(l);
                                                    addNumop(l);
                                                }
                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolo",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // simbolos ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // simbolos ::= simbolo simbolos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sec_simb ::= simbolo simbolos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sec_simb",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // param_expr ::= PARAMETRO NOM_PARAM DOSPTS TYPE OP_ASSIGN expr_e 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                        if(existeSimbolo(l)){
                                                                            System.out.println("ERROR! " + l + " declarada previamente");
                                                                            System.exit(0);
                                                                        }
                                                                        else
                                                                            addSimbolo(l, t, n);
                                                                        if (t.equals("Int"))
                                                                            if(n % 1 > 0){
                                                                                System.out.println("ERROR! no se puede guardar " + n + " en tipo Int");
                                                                                System.exit(0);
                                                                            }
                                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("param_expr",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // param_valor ::= PARAMETRO NOM_PARAM DOSPTS TYPE VALOR NUMERO 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                        if(existeSimbolo(l)){
                                                                            System.out.println("ERROR! " + l + " declarada previamente");
                                                                            System.exit(0);
                                                                        }
                                                                        else
                                                                            addSimbolo(l, t, n);
                                                                        if (t.equals("Int"))
                                                                            if(n % 1 > 0){
                                                                                System.out.println("ERROR! no se puede guardar " + n + " en tipo Int");
                                                                                System.exit(0);
                                                                            }
                                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("param_valor",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sec_param ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sec_param",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sec_param ::= param_expr sec_param 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sec_param",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sec_param ::= param_valor sec_param 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sec_param",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // gramatica ::= GRAMATICA sec_param sec_simb 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("gramatica",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // secciones ::= TITULO NT$1 DOBLESALTO gramatica NT$2 DOBLESALTO condiciones DOBLESALTO matriz DOBLESALTO GENERATRIZ list_gen FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("secciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
print();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
setTitulo(t);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= NT$0 secciones 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
inicializar();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // dibujar ::= program 
            {
              Object RESULT =null;
		dibujar();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dibujar",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= dibujar EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

