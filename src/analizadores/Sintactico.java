
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 12 18:37:29 VET 2017
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import utilidades.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 12 18:37:29 VET 2017
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\053\002\000\002\002" +
    "\004\000\002\054\002\000\002\055\002\000\002\003\021" +
    "\000\002\004\004\000\002\004\002\000\002\005\005\000" +
    "\002\044\004\000\002\044\002\000\002\045\004\000\002" +
    "\046\005\000\002\046\002\000\002\047\004\000\002\047" +
    "\002\000\002\050\010\000\002\051\010\000\002\052\004" +
    "\000\002\006\004\000\002\006\002\000\002\007\005\000" +
    "\002\010\005\000\002\010\002\000\002\011\003\000\002" +
    "\011\005\000\002\011\002\000\002\012\016\000\002\016" +
    "\004\000\002\014\005\000\002\014\003\000\002\014\005" +
    "\000\002\024\005\000\002\013\005\000\002\013\003\000" +
    "\002\015\006\000\002\015\003\000\002\021\011\000\002" +
    "\021\006\000\002\023\004\000\002\023\002\000\002\027" +
    "\005\000\002\027\003\000\002\022\004\000\002\022\003" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\030\003\000\002\035\005\000\002\035" +
    "\003\000\002\031\005\000\002\031\003\000\002\032\005" +
    "\000\002\032\003\000\002\033\005\000\002\033\003\000" +
    "\002\036\005\000\002\036\003\000\002\037\006\000\002" +
    "\037\003\000\002\040\005\000\002\040\003\000\002\034" +
    "\005\000\002\034\003\000\002\034\004\000\002\034\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\004\004\000\001\002\000\004\002\232\001" +
    "\002\000\004\004\006\001\002\000\004\055\ufffe\001\002" +
    "\000\004\002\uffff\001\002\000\004\055\011\001\002\000" +
    "\006\005\013\006\ufffa\001\002\000\004\006\016\001\002" +
    "\000\004\055\014\001\002\000\004\006\ufffb\001\002\000" +
    "\004\055\115\001\002\000\010\013\021\020\ufff7\055\ufff7" +
    "\001\002\000\006\020\101\055\uffed\001\002\000\010\013" +
    "\ufff4\020\ufff4\055\ufff4\001\002\000\004\057\022\001\002" +
    "\000\004\050\023\001\002\000\004\054\024\001\002\000" +
    "\004\017\025\001\002\000\004\056\026\001\002\000\010" +
    "\013\ufff1\020\ufff1\055\ufff1\001\002\000\006\020\ufff8\055" +
    "\ufff8\001\002\000\010\013\021\020\ufff2\055\ufff2\001\002" +
    "\000\010\013\034\020\ufff6\055\ufff6\001\002\000\010\013" +
    "\ufff2\020\ufff2\055\ufff2\001\002\000\010\013\034\020\ufff5" +
    "\055\ufff5\001\002\000\004\057\036\001\002\000\010\013" +
    "\ufff3\020\ufff3\055\ufff3\001\002\000\004\050\037\001\002" +
    "\000\004\054\040\001\002\000\004\032\041\001\002\000" +
    "\014\024\044\031\050\052\043\056\053\057\045\001\002" +
    "\000\042\013\uffcb\015\uffcb\016\uffcb\020\uffcb\023\uffcb\024" +
    "\061\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb" +
    "\042\uffcb\051\uffcb\053\uffcb\055\uffcb\001\002\000\014\024" +
    "\044\031\050\052\043\056\053\057\045\001\002\000\012" +
    "\024\044\052\043\056\053\057\045\001\002\000\052\013" +
    "\uffbb\015\uffbb\016\uffbb\020\uffbb\023\uffbb\024\uffbb\025\uffbb" +
    "\026\uffbb\027\uffbb\030\uffbb\034\uffbb\035\uffbb\036\uffbb\037" +
    "\uffbb\040\uffbb\041\uffbb\042\uffbb\051\uffbb\053\uffbb\055\uffbb" +
    "\001\002\000\052\013\uffc1\015\uffc1\016\uffc1\020\uffc1\023" +
    "\uffc1\024\uffc1\025\uffc1\026\uffc1\027\074\030\uffc1\034\uffc1" +
    "\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\051" +
    "\uffc1\053\uffc1\055\uffc1\001\002\000\050\013\uffc3\015\uffc3" +
    "\016\uffc3\020\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\030" +
    "\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3" +
    "\042\uffc3\051\uffc3\053\uffc3\055\uffc3\001\002\000\004\052" +
    "\071\001\002\000\050\013\uffc5\015\uffc5\016\uffc5\020\uffc5" +
    "\023\uffc5\024\uffc5\025\uffc5\026\uffc5\030\067\034\uffc5\035" +
    "\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\051\uffc5" +
    "\053\uffc5\055\uffc5\001\002\000\052\013\uffbf\015\uffbf\016" +
    "\uffbf\020\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf" +
    "\030\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041" +
    "\uffbf\042\uffbf\051\uffbf\053\uffbf\055\uffbf\001\002\000\052" +
    "\013\uffbd\015\uffbd\016\uffbd\020\uffbd\023\uffbd\024\uffbd\025" +
    "\uffbd\026\uffbd\027\uffbd\030\uffbd\034\uffbd\035\uffbd\036\uffbd" +
    "\037\uffbd\040\uffbd\041\uffbd\042\uffbd\051\uffbd\053\uffbd\055" +
    "\uffbd\001\002\000\046\013\uffc7\015\uffc7\016\uffc7\020\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\026\065\034\uffc7\035\uffc7\036" +
    "\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\051\uffc7\053\uffc7" +
    "\055\uffc7\001\002\000\044\013\uffc9\015\uffc9\016\uffc9\020" +
    "\uffc9\023\uffc9\024\uffc9\025\063\034\uffc9\035\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\051\uffc9\053\uffc9\055" +
    "\uffc9\001\002\000\012\013\ufff0\020\ufff0\023\057\055\ufff0" +
    "\001\002\000\014\024\044\031\050\052\043\056\053\057" +
    "\045\001\002\000\042\013\uffcc\015\uffcc\016\uffcc\020\uffcc" +
    "\023\uffcc\024\061\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040" +
    "\uffcc\041\uffcc\042\uffcc\051\uffcc\053\uffcc\055\uffcc\001\002" +
    "\000\014\024\044\031\050\052\043\056\053\057\045\001" +
    "\002\000\044\013\uffca\015\uffca\016\uffca\020\uffca\023\uffca" +
    "\024\uffca\025\063\034\uffca\035\uffca\036\uffca\037\uffca\040" +
    "\uffca\041\uffca\042\uffca\051\uffca\053\uffca\055\uffca\001\002" +
    "\000\014\024\044\031\050\052\043\056\053\057\045\001" +
    "\002\000\046\013\uffc8\015\uffc8\016\uffc8\020\uffc8\023\uffc8" +
    "\024\uffc8\025\uffc8\026\065\034\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\040\uffc8\041\uffc8\042\uffc8\051\uffc8\053\uffc8\055\uffc8" +
    "\001\002\000\014\024\044\031\050\052\043\056\053\057" +
    "\045\001\002\000\050\013\uffc6\015\uffc6\016\uffc6\020\uffc6" +
    "\023\uffc6\024\uffc6\025\uffc6\026\uffc6\030\067\034\uffc6\035" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\051\uffc6" +
    "\053\uffc6\055\uffc6\001\002\000\014\024\044\031\050\052" +
    "\043\056\053\057\045\001\002\000\050\013\uffc4\015\uffc4" +
    "\016\uffc4\020\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\030" +
    "\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4" +
    "\042\uffc4\051\uffc4\053\uffc4\055\uffc4\001\002\000\014\024" +
    "\044\031\050\052\043\056\053\057\045\001\002\000\006" +
    "\023\057\053\073\001\002\000\050\013\uffc2\015\uffc2\016" +
    "\uffc2\020\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\030\uffc2" +
    "\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042" +
    "\uffc2\051\uffc2\053\uffc2\055\uffc2\001\002\000\012\024\044" +
    "\052\043\056\053\057\045\001\002\000\052\013\uffc0\015" +
    "\uffc0\016\uffc0\020\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\030\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040" +
    "\uffc0\041\uffc0\042\uffc0\051\uffc0\053\uffc0\055\uffc0\001\002" +
    "\000\052\013\uffbc\015\uffbc\016\uffbc\020\uffbc\023\uffbc\024" +
    "\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\034\uffbc\035\uffbc" +
    "\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\051\uffbc\053" +
    "\uffbc\055\uffbc\001\002\000\006\023\057\053\100\001\002" +
    "\000\052\013\uffbe\015\uffbe\016\uffbe\020\uffbe\023\uffbe\024" +
    "\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\034\uffbe\035\uffbe" +
    "\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\051\uffbe\053" +
    "\uffbe\055\uffbe\001\002\000\004\022\105\001\002\000\004" +
    "\055\ufff9\001\002\000\006\020\101\055\uffed\001\002\000" +
    "\004\055\uffee\001\002\000\010\020\uffea\052\106\055\uffea" +
    "\001\002\000\016\024\044\031\050\052\043\053\uffe7\056" +
    "\053\057\045\001\002\000\006\020\uffec\055\uffec\001\002" +
    "\000\004\053\114\001\002\000\010\023\057\051\112\053" +
    "\uffe9\001\002\000\016\024\044\031\050\052\043\053\uffe7" +
    "\056\053\057\045\001\002\000\004\053\uffe8\001\002\000" +
    "\016\020\uffeb\022\uffeb\043\uffeb\045\uffeb\050\uffeb\055\uffeb" +
    "\001\002\000\004\007\ufffd\001\002\000\004\007\117\001" +
    "\002\000\004\014\217\001\002\000\004\055\121\001\002" +
    "\000\004\011\123\001\002\000\004\055\146\001\002\000" +
    "\010\044\131\046\126\047\132\001\002\000\012\022\uffe3" +
    "\043\144\045\uffe3\055\uffe3\001\002\000\004\043\142\001" +
    "\002\000\004\022\140\001\002\000\012\022\uffdf\043\uffdf" +
    "\045\uffdf\055\uffdf\001\002\000\004\055\uffe5\001\002\000" +
    "\010\044\131\046\126\047\132\001\002\000\014\022\uffdd" +
    "\043\uffdd\045\uffdd\052\133\055\uffdd\001\002\000\014\024" +
    "\044\031\050\052\043\056\053\057\045\001\002\000\006" +
    "\023\057\053\135\001\002\000\012\022\uffde\043\uffde\045" +
    "\uffde\055\uffde\001\002\000\004\045\137\001\002\000\004" +
    "\043\uffe1\001\002\000\014\022\uffea\043\uffea\045\uffea\052" +
    "\106\055\uffea\001\002\000\012\022\uffe0\043\uffe0\045\uffe0" +
    "\055\uffe0\001\002\000\010\044\131\046\126\047\132\001" +
    "\002\000\010\022\uffe2\045\uffe2\055\uffe2\001\002\000\010" +
    "\044\131\046\126\047\132\001\002\000\010\022\uffe4\045" +
    "\uffe4\055\uffe4\001\002\000\004\012\147\001\002\000\004" +
    "\022\152\001\002\000\006\022\152\055\uffd5\001\002\000" +
    "\004\055\214\001\002\000\010\042\153\050\uffea\052\106" +
    "\001\002\000\012\021\176\044\uffd9\046\uffd9\047\uffd9\001" +
    "\002\000\004\050\155\001\002\000\014\024\044\031\050" +
    "\052\156\056\053\057\045\001\002\000\014\024\044\031" +
    "\050\052\156\056\053\057\045\001\002\000\010\034\172" +
    "\035\174\042\173\001\002\000\024\023\057\034\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\053\uffcd" +
    "\001\002\000\012\036\162\037\163\040\164\041\165\001" +
    "\002\000\014\024\044\031\050\052\043\056\053\057\045" +
    "\001\002\000\014\024\044\031\050\052\043\056\053\057" +
    "\045\001\002\000\014\024\044\031\050\052\043\056\053" +
    "\057\045\001\002\000\014\024\044\031\050\052\043\056" +
    "\053\057\045\001\002\000\012\034\uffd1\035\uffd1\042\uffd1" +
    "\053\uffd1\001\002\000\012\034\uffd2\035\uffd2\042\uffd2\053" +
    "\uffd2\001\002\000\012\034\uffd0\035\uffd0\042\uffd0\053\uffd0" +
    "\001\002\000\012\034\uffcf\035\uffcf\042\uffcf\053\uffcf\001" +
    "\002\000\014\024\044\031\050\052\156\056\053\057\045" +
    "\001\002\000\012\021\176\044\uffd9\046\uffd9\047\uffd9\001" +
    "\002\000\014\024\044\031\050\052\156\056\053\057\045" +
    "\001\002\000\012\034\uffd4\035\uffd4\042\uffd4\053\uffd4\001" +
    "\002\000\004\056\205\001\002\000\010\044\131\046\126" +
    "\047\132\001\002\000\006\022\uffdc\055\uffdc\001\002\000" +
    "\004\043\203\001\002\000\006\022\uffd7\055\uffd7\001\002" +
    "\000\010\044\131\046\126\047\132\001\002\000\006\022" +
    "\uffd8\055\uffd8\001\002\000\010\044\uffda\046\uffda\047\uffda" +
    "\001\002\000\012\034\uffd3\035\uffd3\042\uffd3\053\uffd3\001" +
    "\002\000\010\034\172\035\174\053\211\001\002\000\016" +
    "\023\057\036\uffcd\037\uffcd\040\uffcd\041\uffcd\053\100\001" +
    "\002\000\012\034\uffce\035\uffce\042\uffce\053\uffce\001\002" +
    "\000\010\044\131\046\126\047\132\001\002\000\006\022" +
    "\uffdb\055\uffdb\001\002\000\004\010\215\001\002\000\004" +
    "\002\ufffc\001\002\000\004\055\uffd6\001\002\000\014\024" +
    "\044\031\050\052\043\056\053\057\045\001\002\000\006" +
    "\015\221\023\057\001\002\000\014\024\044\031\050\052" +
    "\043\056\053\057\045\001\002\000\006\016\223\023\057" +
    "\001\002\000\004\052\224\001\002\000\014\024\044\031" +
    "\050\052\043\056\053\057\045\001\002\000\006\023\057" +
    "\051\226\001\002\000\004\056\227\001\002\000\004\053" +
    "\230\001\002\000\014\024\044\031\050\052\043\056\053" +
    "\057\045\001\002\000\006\023\057\055\uffe6\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\006\002\003\053\004\001\001\000\002\001" +
    "\001\000\004\003\006\001\001\000\004\054\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\011\001" +
    "\001\000\004\005\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\044\016\050\017\001" +
    "\001\000\006\006\101\007\102\001\001\000\006\045\026" +
    "\046\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\047\030\050\031\001" +
    "\001\000\004\051\034\001\001\000\004\047\032\001\001" +
    "\000\004\051\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\031\041\032\054\033\053\034\051\035\055\036" +
    "\050\037\046\040\045\001\001\000\002\001\001\000\022" +
    "\031\041\032\054\033\053\034\051\035\076\036\050\037" +
    "\046\040\045\001\001\000\004\034\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\031\057\032\054\033\053\034\051\036\050\037\046" +
    "\040\045\001\001\000\002\001\001\000\016\032\061\033" +
    "\053\034\051\036\050\037\046\040\045\001\001\000\002" +
    "\001\001\000\014\033\063\034\051\036\050\037\046\040" +
    "\045\001\001\000\002\001\001\000\012\034\051\036\065" +
    "\037\046\040\045\001\001\000\002\001\001\000\010\034" +
    "\051\037\067\040\045\001\001\000\002\001\001\000\022" +
    "\031\041\032\054\033\053\034\051\035\071\036\050\037" +
    "\046\040\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\103\007\102\001\001\000" +
    "\002\001\001\000\004\010\106\001\001\000\024\011\107" +
    "\031\041\032\054\033\053\034\051\035\110\036\050\037" +
    "\046\040\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\011\112\031\041\032\054\033" +
    "\053\034\051\035\110\036\050\037\046\040\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\115\001" +
    "\001\000\004\012\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\121\001\001\000\002\001\001\000" +
    "\012\013\123\014\127\015\126\024\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\123\014\135\015\126" +
    "\024\124\001\001\000\002\001\001\000\022\031\041\032" +
    "\054\033\053\034\051\035\133\036\050\037\046\040\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\140\001\001\000\002" +
    "\001\001\000\012\013\123\014\142\015\126\024\124\001" +
    "\001\000\002\001\001\000\012\013\123\014\144\015\126" +
    "\024\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\147\022\150\001\001\000\006\021\147\022\215" +
    "\001\001\000\002\001\001\000\004\010\153\001\001\000" +
    "\004\023\211\001\001\000\002\001\001\000\026\025\156" +
    "\030\160\031\041\032\054\033\053\034\051\035\157\036" +
    "\050\037\046\040\045\001\001\000\026\025\206\030\160" +
    "\031\041\032\054\033\053\034\051\035\207\036\050\037" +
    "\046\040\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\030\170\031\041\032\054\033" +
    "\053\034\051\035\157\036\050\037\046\040\045\001\001" +
    "\000\024\030\167\031\041\032\054\033\053\034\051\035" +
    "\157\036\050\037\046\040\045\001\001\000\024\030\166" +
    "\031\041\032\054\033\053\034\051\035\157\036\050\037" +
    "\046\040\045\001\001\000\024\030\165\031\041\032\054" +
    "\033\053\034\051\035\157\036\050\037\046\040\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\025\205\030\160\031\041\032" +
    "\054\033\053\034\051\035\157\036\050\037\046\040\045" +
    "\001\001\000\004\023\176\001\001\000\026\025\174\030" +
    "\160\031\041\032\054\033\053\034\051\035\157\036\050" +
    "\037\046\040\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\013\123\014\201\015\126\024\124\026\200" +
    "\027\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\013\123\014\201\015\126\024\124" +
    "\026\200\027\203\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\013\123\014\201\015\126\024" +
    "\124\026\200\027\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\031" +
    "\041\032\054\033\053\034\051\035\217\036\050\037\046" +
    "\040\045\001\001\000\002\001\001\000\022\031\041\032" +
    "\054\033\053\034\051\035\221\036\050\037\046\040\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\031" +
    "\041\032\054\033\053\034\051\035\224\036\050\037\046" +
    "\040\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\031\041\032\054\033\053\034\051" +
    "\035\230\036\050\037\046\040\045\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) + " Columna " + s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {



    TablaTipos tabla;

    void setTitulo(String nombrePrograma){
        tabla.setNombrePrograma(nombrePrograma);
    }

    void inicializar(){
        tabla = new TablaTipos();
    }

    void addSimbolo(String nombre, String tipoBase, Float valor){
        tabla.agregaTipo(nombre, tipoBase, valor);
    }

    boolean existeSimbolo(String nombre){
        return tabla.existeTipo(nombre);
    }

    Tipo getTipo(String nombre){
        return tabla.getTipo(nombre);
    }

    void print(){
        tabla.print();
    }



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr_h ::= NOM_PARAM 
            {
              Float RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                            if(!existeSimbolo(n)){
                                System.out.println("ERROR SEMANTICO! " + n + " no se encuantra declarada");
                                System.exit(0);
                            }
                            RESULT=new Float(getTipo(n).getValor()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_h",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr_h ::= OP_RESTA expr_h 
            {
              Float RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Float(0-r.floatValue());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_h",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr_h ::= NUMERO 
            {
              Float RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=n; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_h",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr_h ::= LP expr_e RP 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_h",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr_k ::= expr_h 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_k",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr_k ::= expr_k OP_MOD expr_h 
            {
              Float RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Float(l.floatValue() % r.floatValue());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_k",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr_j ::= expr_k 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_j",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr_j ::= OP_LOG LP expr_e RP 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT= new Float((int) Math.log(e));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_j",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr_i ::= expr_j 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_i",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr_i ::= expr_i OP_POTENCIA expr_j 
            {
              Float RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT= new Float((int) Math.pow(l.floatValue(),r.floatValue()));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_i",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr_g ::= expr_i 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_g",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr_g ::= expr_g OP_DIVISION expr_i 
            {
              Float RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Float(l.floatValue() / r.floatValue()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_g",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr_f ::= expr_g 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_f",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_f ::= expr_f OP_PRODUCTO expr_g 
            {
              Float RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Float(l.floatValue() * r.floatValue()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_f",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr_t ::= expr_f 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_t",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr_t ::= expr_t OP_RESTA expr_f 
            {
              Float RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Float(l.floatValue() - r.floatValue()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_t",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr_e ::= expr_t 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_e",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr_e ::= expr_e OP_SUMA expr_t 
            {
              Float RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Float(l.floatValue() + r.floatValue()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_e",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr_part ::= expr_e 
            {
              Float RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_part",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr_log ::= LP expr_log RP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_log",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr_log ::= expr_part OP_MENOR expr_part 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_log",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr_log ::= expr_part OP_MAYOR expr_part 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_log",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr_log ::= expr_part OP_DIF expr_part 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_log",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr_log ::= expr_part OP_IGUAL expr_part 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_log",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr_log ::= expr_log OP_AND expr_log 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_log",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr_log ::= expr_log OP_OR expr_log 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr_log",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // list_gen ::= generatriz 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("list_gen",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // list_gen ::= generatriz list_gen 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("list_gen",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // movs_generatriz ::= movimientos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("movs_generatriz",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // movs_generatriz ::= mov_generatriz DOBLERAYA movs_generatriz 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("movs_generatriz",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // probabilidad ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("probabilidad",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // probabilidad ::= PROBABILIDAD NUMERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("probabilidad",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // generatriz ::= NOM_SIMBOL FLECHA probabilidad movs_generatriz 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("generatriz",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // generatriz ::= NOM_SIMBOL list_param DOSPTS expr_log FLECHA probabilidad movs_generatriz 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("generatriz",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // turn ::= TURN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("turn",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // turn ::= TURN LP expr_e RP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("turn",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // movimiento ::= turn 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("movimiento",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // movimiento ::= MOV NOM_SIMBOL list_param 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("movimiento",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // mov_emp ::= PUSH movimientos POP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("mov_emp",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // movimientos ::= mov_emp DOBLERAYA movimientos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("movimientos",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // movimientos ::= movimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("movimientos",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // movimientos ::= movimiento DOBLERAYA movimientos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("movimientos",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // matriz ::= MATRIZ movimientos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("matriz",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condiciones ::= CONDICIONES PASOS expr_e ANGULO expr_e POSICION LP expr_e COMA NUMERO RP expr_e 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Float p = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Float a = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int aileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int airight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float ai = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                                                            if((p % 1 != 0) || (p < 0)){
                                                                                                                System.out.println("ERROR SEMANTICO! la cantidad de pasos debe ser un numero natural mayor que 0");
                                                                                                                System.exit(0);
                                                                                                            }
                                                                                                            if(!((a < 90) && (a > 0))){
                                                                                                                System.out.println("ERROR SEMANTICO! el angulo debe estar entre 0 y 90");
                                                                                                                System.exit(0);
                                                                                                            }
                                                                                                            if(!((ai < 180) && (ai > 0))){
                                                                                                                System.out.println("ERROR SEMANTICO! el angulo de posicion inicial debe estar entre 0 y 180");
                                                                                                                System.exit(0);
                                                                                                            }
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condiciones",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // param ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("param",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // param ::= expr_e COMA param 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("param",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // param ::= expr_e 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("param",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // list_param ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("list_param",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // list_param ::= LP param RP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("list_param",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // simbolo ::= SIMBOLO NOM_SIMBOL list_param 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                if(existeSimbolo(l)){
                                                    System.out.println("ERROR! " + l + " declarada previamente");
                                                    System.exit(0);
                                                }
                                                else
                                                    addSimbolo(l, "Simbolo", null);
                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolo",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // simbolos ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // simbolos ::= simbolo simbolos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolos",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // list_simb ::= simbolo simbolos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("list_simb",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcion ::= PARAMETRO NOM_PARAM DOSPTS TYPE OP_ASSIGN expr_e 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

                                                                        if (t.equals("Int"))
                                                                            if(e % 1 > 0){
                                                                                System.out.println("ERROR! no se puede guardar " + e + " en Int");
                                                                                System.exit(0);
                                                                            }
                                                                        if(existeSimbolo(l)){
                                                                            System.out.println("ERROR! " + l + " declarada previamente");
                                                                            System.exit(0);
                                                                        }
                                                                        else
                                                                            addSimbolo(l, t, e);
                                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // valor ::= PARAMETRO NOM_PARAM DOSPTS TYPE VALOR NUMERO 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                    if (t.equals("Int"))
                                                                        if(n % 1 > 0){
                                                                            System.out.println("ERROR! no se puede guardar " + n + " en tipo Int");
                                                                            System.exit(0);
                                                                        }
                                                                    if(existeSimbolo(l)){
                                                                        System.out.println("ERROR! " + l + " declarada previamente");
                                                                        System.exit(0);
                                                                    }
                                                                    else
                                                                        addSimbolo(l, t, n);
                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // paramfunc ::= 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("paramfunc",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // paramfunc ::= paramfunc funcion 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("paramfunc",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // paramvariables ::= 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("paramvariables",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // paramvariables ::= paramvariables valor paramfunc 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("paramvariables",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametros ::= paramvariables paramfunc 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sec_param ::= 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sec_param",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sec_param ::= valor parametros 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sec_param",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // gramatica ::= GRAMATICA sec_param simbolos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("gramatica",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // comentarios ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comentarios",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // comentarios ::= COMENTARIOS DOBLESALTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comentarios",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // secciones ::= TITULO NT$1 DOBLESALTO comentarios gramatica DOBLESALTO NT$2 condiciones DOBLESALTO matriz DOBLESALTO GENERATRIZ list_gen DOBLESALTO FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("secciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
 print(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
setTitulo(t);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 secciones 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
inicializar();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

